SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_wine_split_180", 
    "policy": {
        "step_pipeline": 180
    }, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "wine", 
        "policy": "split", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Wine with Split policy"
}
## Data Pipeline
Best score: 0.709148176815 (0.0485641324915) [P] | Score: 0.709148176815 (0.0485641324915) [P]
Best score: 0.7987250602 (0.0725529578548) [P] | Score: 0.7987250602 (0.0725529578548) [P]
Best score: 0.922112573099 (0.0613639984448) [P] | Score: 0.922112573099 (0.0613639984448) [P]
Best score: 0.94470244238 (0.0490772839771) [P] | Score: 0.94470244238 (0.0490772839771) [P]
Best score: 0.94470244238 (0.0490772839771) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.94470244238 (0.0490772839771) [P] | Score: 0.657649638803 (0.144113307064) [P]
Best score: 0.94470244238 (0.0490772839771) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.94470244238 (0.0490772839771) [P] | Score: 0.884100877193 (0.0915936620531) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.777238132095 (0.0763014268294) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.863820089439 (0.0790349983343) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.810018919849 (0.0981843900823) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.890350877193 (0.0969971672957) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.713899638803 (0.100774286109) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.889766081871 (0.0739257389302) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.850515995872 (0.0953311726009) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.937833247334 (0.0468973015984) [P]
Best score: 0.945029239766 (0.0549956395112) [P] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.916271069831 (0.0463676390382) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.944736842105 (0.0430420877674) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.655641554868 (0.125621452015) [P]
Best score: 0.950292397661 (0.0523873475648) [P] | Score: 0.730710354317 (0.0625353983508) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900223598211 (0.0810934551673) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.95522875817 (0.0485170314967) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.899896800826 (0.060094113826) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910681114551 (0.0637486419726) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878149724802 (0.0965893105874) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.72654368765 (0.0915504649989) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.723948658411 (0.100141431668) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905445906433 (0.0783481240634) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0381399570378) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.81253869969 (0.119892083478) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.760169418645 (0.0554160817289) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877197282422 (0.055898270903) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856071551428 (0.0891084949561) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.673621861025 (0.155506178242) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0504653723412) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955521155831 (0.0484599339307) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932972136223 (0.0491454007305) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921861025112 (0.0376774400606) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.904792311662 (0.0350092098544) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905119109047 (0.0490937548859) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932277691778 (0.0490273079958) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944334795322 (0.0423686789682) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94897875817 (0.0463230431036) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0390757291364) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.753416322669 (0.107400871171) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.775739594083 (0.0965726098822) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878001375989 (0.0772580236521) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.799350705194 (0.107633356272) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.872772617819 (0.0958287690331) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.893605951152 (0.0450834693347) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0362241066736) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.928001375989 (0.0489597761581) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932529239766 (0.0552856342949) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916305469556 (0.0380320967844) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.629843911249 (0.147270106231) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.753259373925 (0.095457643776) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.815099329205 (0.0540496135642) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921820175439 (0.0565466502141) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.718175954592 (0.0888265459186) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.956140350877 (0.040663253956) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.817113863089 (0.112324742734) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.788893188854 (0.0788236245959) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888968438252 (0.0891023387622) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.613497592019 (0.11011178628) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0351637547359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.844926040592 (0.0972021185177) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0497097329339) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.804757911937 (0.0784220544899) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.669633642931 (0.15424069632) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.943640350877 (0.0507990447237) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.811448658411 (0.108946375431) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.840024079807 (0.0854178987485) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938854489164 (0.0389086777691) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.549580753354 (0.118634929724) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932896886825 (0.0538275650574) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932604489164 (0.0331832611461) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0381399570378) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0616453242397) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.711053061576 (0.12843057154) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955813553492 (0.0407689314842) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8174750602 (0.139421596593) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.812906346749 (0.118370142543) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.749533453732 (0.110864342076) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.943423202614 (0.0430894350526) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.671095631235 (0.121132815144) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.956140350877 (0.0537407491902) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.703919418645 (0.0889030683932) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.899597953216 (0.0954231671578) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.785537065703 (0.103870856073) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944117647059 (0.0497000701333) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.873684210526 (0.109348906747) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.710094169247 (0.078864166411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.78260878913 (0.109434676193) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8112250602 (0.0799829434184) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926027691778 (0.0455266584095) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.846198830409 (0.123813751581) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944736842105 (0.0702783115368) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.860272617819 (0.0702821642909) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.713974888201 (0.0986359431781) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.828620571035 (0.119566441537) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.672417870657 (0.0636555957402) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938486842105 (0.0678219293354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.57460870313 (0.102416956629) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.89265995872 (0.0885611796662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0461728664335) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856071551428 (0.0891084949561) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933298933609 (0.0484441567158) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.787762297902 (0.106997083204) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932896886825 (0.0477506315078) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911695906433 (0.0752070429721) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0863438043477) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94338880289 (0.0439694037945) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736633556932 (0.0468892765493) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.817182662539 (0.110493673789) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.822342621259 (0.112596438352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916924664603 (0.0442713232045) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.680164258686 (0.131295494168) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889439284486 (0.101825881573) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8674750602 (0.103962298585) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736994754042 (0.0799772358441) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0430554711708) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921751375989 (0.0496580641178) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.799092707258 (0.0909680788392) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.817004213966 (0.114050591856) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.899604403165 (0.0556197942486) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.0844110457376) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.569053147575 (0.101791102126) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.917217062264 (0.0702616400119) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93918128655 (0.067843818897) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0351637547359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889439284486 (0.0816382658715) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.779981510148 (0.0995920625766) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.757535689714 (0.0687902102728) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927055383557 (0.0640408161306) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884795321637 (0.0953162557229) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.849604403165 (0.0999922310641) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94993120055 (0.0463219757223) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.652094083247 (0.138182422906) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861627106983 (0.0959167487181) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93918128655 (0.0461914273438) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.559638372893 (0.119760339071) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949271155831 (0.0463027228622) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.870912882697 (0.0761762738485) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922187822497 (0.075361828633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895906432749 (0.0951456776531) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.133171105359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0623469650624) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.657759287926 (0.0595288906017) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949312005504 (0.0486326253864) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.548737960096 (0.114475535872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932972136223 (0.0491454007305) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.703919418645 (0.054456257352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.966632266942 (0.0368981749401)
##################################################
## Algorithm
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 228, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 228, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 228, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:14 2019
PID: 15005                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 230, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 230, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 230, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:20 2019
PID: 15140                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 233, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 233, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 233, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:25 2019
PID: 15184                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 235, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 235, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 235, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:30 2019
PID: 15230                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 242, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:36 2019
PID: 15273                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 245, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 245, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 245, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:41 2019
PID: 15315                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922772617819 (0.0425828439622) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93388372893 (0.0394227600048) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 258, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 258, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 258, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:49 2019
PID: 15362                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.725447196422 (0.0639956153132) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 262, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 262, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.24984288215637207, 'iteration': 29, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 262, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:10:55 2019
PID: 15404                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 266, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 266, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 266, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:01 2019
PID: 15447                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.825773993808 (0.0664370645952) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 271, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 271, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 271, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:07 2019
PID: 15492                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939146886825 (0.0381399570378) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 276, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 276, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 276, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:12 2019
PID: 15537                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922772617819 (0.0425828439622) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 281, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 281, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 281, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:18 2019
PID: 15582                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.730710354317 (0.0625353983508) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 293, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 293, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 293, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:27 2019
PID: 15625                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0546855080177) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 297, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 297, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '0bb47602e9b01ec2ece03ac99e6ea5770372574d': 113, '0ccb39906875cfee77ea5a0aaee78ed1f9cadc14': 228, ...}, 'iteration': 297, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:33 2019
PID: 15671                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93845244238 (0.028885202632) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.950257997936 (0.0380647216643) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 307, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 307, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 307, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:40 2019
PID: 15715                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 313, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 313, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 313, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:46 2019
PID: 15758                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 318, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 318, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 318, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:52 2019
PID: 15801                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 321, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 321, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 321, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:11:58 2019
PID: 15847                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933189284486 (0.0527104783224) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 335, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 335, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 335, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:12:07 2019
PID: 15892                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_180.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 120
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=120, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 339, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 339, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'cedf6430d20a0ba8e6a85475407884f46e5eb99d', 'config': '3fd949ae12d3abaef6771dedda98ce8b0a658941', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 4.362293004989624, 'iteration': 264, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.26434803009033203, 'iteration': 0, 'loss': 0.2908518231854146, 'max_history_score': 0.7091481768145854, 'max_history_score_std': 0.048564132491501634, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7091481768145854, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'pipeline': '50775d706a4d41e338a26477bbd4e04c375730a8'}, 'duration': 0.6177990436553955, 'iteration': 1, 'loss': 0.2012749398004816, 'max_history_score': 0.7987250601995184, 'max_history_score_std': 0.07255295785478709, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7987250601995184, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b25d2345821d75c20e8719d43d2b1e1191098447', 'pipeline': 'cfef88e895db321122f2f7b813d9267b973c2468'}, 'duration': 0.1917130947113037, 'iteration': 2, 'loss': 0.0778874269005847, 'max_history_score': 0.9221125730994153, 'max_history_score_std': 0.06136399844482612, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9221125730994153, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '8b308d51c57b78edf700a1bb96d67e040ffbacba', 'pipeline': 'eac91c34ce5f9e9c390c03ce0ed9ba90cb2d0674'}, 'duration': 0.2505371570587158, 'iteration': 3, 'loss': 0.05529755761953903, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.944702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '899b4a9c2c54e0f9d2a68be126533e78284d0b09', 'pipeline': '98b0cd98b667e4a18477839e82c3cd1a6036d23c'}, 'duration': 0.21066904067993164, 'iteration': 4, 'loss': 0.11761480908152733, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '810cfa5c38799c7772a1374a87cd9fb3f000b03c', 'pipeline': 'e5f95967804f43e8d608bffd9497c15650672b87'}, 'duration': 0.12831401824951172, 'iteration': 5, 'loss': 0.3423503611971104, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6576496388028896, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.16043996810913086, 'iteration': 6, 'loss': 0.13428147574819393, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', 'pipeline': '19b249664c5bf067de1fed4334a296f947ce774a'}, 'duration': 0.19977593421936035, 'iteration': 7, 'loss': 0.11589912280701742, 'max_history_score': 0.944702442380461, 'max_history_score_std': 0.04907728397710094, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8841008771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'pipeline': '3e47444880d8367fbac2faaba2e52a917274aa58'}, 'duration': 0.12341594696044922, 'iteration': 8, 'loss': 0.054970760233918115, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9450292397660819, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', 'pipeline': 'af39e09e270d57932a95e88324cb04b65c81d7a8'}, 'duration': 0.22618603706359863, 'iteration': 9, 'loss': 0.2227618679050567, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7772381320949433, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', 'pipeline': '1ece7eabedc2be9e5b0a1be65c570d08ffa3eb54'}, 'duration': 0.15915489196777344, 'iteration': 10, 'loss': 0.11761480908152733, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8823851909184727, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'pipeline': 'b3533dc63d37b487250f731488d8a7a5f9e22cfa'}, 'duration': 1.4197330474853516, 'iteration': 11, 'loss': 0.13617991056071543, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8638200894392846, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', 'pipeline': 'fc860559c1711d177fd844a8e2ee89b3f137bfdf'}, 'duration': 1.5590038299560547, 'iteration': 12, 'loss': 0.18998108015135884, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8100189198486412, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', 'pipeline': '084a512b268e3687e7c9f1a68b98e2fe43d702b7'}, 'duration': 0.23180317878723145, 'iteration': 13, 'loss': 0.10964912280701744, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8903508771929826, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.23453783988952637, 'iteration': 14, 'loss': 0.13804609563123493, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'c96d439c56d8a459441d8aa29aebcb5541ade71c', 'pipeline': '24d5323828598c5887cbb2c4befe9a106aeb917c'}, 'duration': 0.608151912689209, 'iteration': 15, 'loss': 0.28610036119711046, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7138996388028895, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'pipeline': '108144e191e06d554f9f133c640bd402eef622bf'}, 'duration': 0.24849200248718262, 'iteration': 16, 'loss': 0.1102339181286549, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8897660818713451, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'fb022704a75355302713187c9afbefbd6b03cec6', 'pipeline': '0363cb9fdc9c9c39f8108608bd518dd42184efa2'}, 'duration': 0.22934317588806152, 'iteration': 17, 'loss': 0.14948400412796692, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8505159958720331, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7a11ea8922f7816de5603b07bcd227c780cb209c', 'pipeline': 'da227cd0f7245cef4f40c81aa10ef7664e50f062'}, 'duration': 0.07695293426513672, 'iteration': 18, 'loss': 0.1108531131750945, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', 'pipeline': 'dadad6141fae2710170b3b9244804730f0fb129a'}, 'duration': 2.095080852508545, 'iteration': 19, 'loss': 0.0621667526659786, 'max_history_score': 0.9450292397660819, 'max_history_score_std': 0.054995639511152036, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.9378332473340214, ...}, ...], 'history_hash': ['ead29a5e0bf9e15a4da1515421b67ab70b03da98', '75b4cfb56bf0d72d79dd86e789d9fd6a9264386a', 'b25d2345821d75c20e8719d43d2b1e1191098447', '8b308d51c57b78edf700a1bb96d67e040ffbacba', '899b4a9c2c54e0f9d2a68be126533e78284d0b09', '810cfa5c38799c7772a1374a87cd9fb3f000b03c', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'd42db3c899e912dabed80fa82f55e7ee15eb3f6d', '41156d3afb414e4bc6f83dea59e1ebd3a0fd22eb', 'd60f6fbcfd4544bb15fdc201c5d6e6c085610167', '24369c11191b9b97c3ea92dedbf2b7dfc03a8e4c', '169955ab0a77416bbd45ed17fe9323af0e9d2f05', 'b951bd33cda1a9d9b8b4d908cb8d9d796ec0c5ee', '6000da38707f2f1b40730f32a0e2ecdd4c288bf2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'c96d439c56d8a459441d8aa29aebcb5541ade71c', '3754d07e2771e1a09b0a5d6de165eeab1857bd52', 'fb022704a75355302713187c9afbefbd6b03cec6', '7a11ea8922f7816de5603b07bcd227c780cb209c', 'a1ef6f4ea5caa35c131487de1547c151bb907ebc', ...], 'history_index': {'007b993211bbd23ca5a72c9669589dfaec2aea38': 307, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 122, '021eeabaf291640b62d99c37a4b004ad5831e1b4': 157, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 90, '02f0a9668b9a484df3dff337c4958f014c44b94a': 98, '047a53ba46b6ad07075d3f4e2795c4615fe5094d': 186, '06900bef806f29c8778c1219a5e04d350ce00e28': 41, '06c98c11f0c6e1c094817bd5e63a1149a2c87762': 28, '07f6c544a5aca219f5c41d4b62d5f48320d1400c': 216, '095a9a44e5afcb9f8322c30907c330ae0c9404d8': 303, ...}, 'iteration': 339, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 180, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Wed Jun  5 23:12:13 2019
PID: 15933                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 4, 
    "max_features": 2, 
    "max_leaf_nodes": null, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
