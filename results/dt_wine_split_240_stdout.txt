SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_wine_split_240", 
    "policy": {
        "step_pipeline": 240
    }, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "wine", 
        "policy": "split", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Wine with Split policy"
}
## Data Pipeline
Best score: 0.779981510148 (0.0995920625766) [P] | Score: 0.779981510148 (0.0995920625766) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.916305469556 (0.0517784538882) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.911001461988 (0.0789445340757) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.779136566907 (0.132031939318) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.84470244238 (0.137852781134) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.84090127279 (0.122410660645) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.889439284486 (0.0816382658715) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.938527691778 (0.0398239925278) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.906030701754 (0.06807719339) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.59709752322 (0.116577957244) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.72029368765 (0.0440349251413) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.884795321637 (0.0953162557229) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.860715514276 (0.0975367118242) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.943423202614 (0.0430894350526) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.954534313725 (0.0487157144722) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.95522875817 (0.0485170314967) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.933264533884 (0.0545597420555) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.927416580667 (0.0616453242397) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.789439284486 (0.135572208972) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.684842621259 (0.148126269577) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.884502923977 (0.0964491313452) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.933264533884 (0.0545597420555) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.910347867217 (0.0506091469615) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.900550395597 (0.0881117844125) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.873942208462 (0.106303650428) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.622424320605 (0.125187565939) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.809141726866 (0.0559679406231) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.906432748538 (0.0779995080654) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.80852253182 (0.100783879428) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.747886566907 (0.0997416419023) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.905119109047 (0.0490937548859) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.8112250602 (0.0799829434184) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.81579377365 (0.0912322607013) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.945029239766 (0.0423078298191) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.840024079807 (0.0854178987485) [P]
Best score: 0.95522875817 (0.0485170314967) [P] | Score: 0.910715514276 (0.0522683669409) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.895287237702 (0.0784797435618) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.763566391469 (0.111819335528) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.944736842105 (0.0702783115368) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.844231596147 (0.108551867415) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.938493292054 (0.0643649646432) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.917217062264 (0.05554139182) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.895287237702 (0.0784797435618) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.938527691778 (0.0531085518734) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.657649638803 (0.144113307064) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.93388372893 (0.0528083507377) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.932277691778 (0.0422657423773) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.904792311662 (0.0429293457351) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.904499914001 (0.0433827985878) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.758997678019 (0.116514407791) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.895287237702 (0.0784797435618) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.866924664603 (0.0830250399535) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.804757911937 (0.0784220544899) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.884468524252 (0.118260031388) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.960784313725 (0.0501184039547) [P] | Score: 0.911042311662 (0.0445651587999) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.715690574475 (0.0827252420977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927708978328 (0.0612176931377) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938527691778 (0.0586327743903) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916271069831 (0.0581766778977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916305469556 (0.0380320967844) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.904792311662 (0.0350092098544) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686455108359 (0.0772933804785) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.956140350877 (0.040663253956) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932972136223 (0.0491454007305) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900223598211 (0.0810934551673) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.657759287926 (0.0540962555604) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.822342621259 (0.112596438352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.815099329205 (0.0540496135642) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.897963966288 (0.0774955843766) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926762985896 (0.0594651158951) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939473684211 (0.0626584377353) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748514361885 (0.104041350662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.886812005504 (0.0449301265667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0497097329339) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.715398176815 (0.0977624202341) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.663205194358 (0.141110043398) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.744121947024 (0.0946010336362) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949346405229 (0.047046340029) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894483144135 (0.0868166833929) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.691092621259 (0.146781884008) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.671830925353 (0.121534215023) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938527691778 (0.0531085518734) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.890316477468 (0.0886326466366) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867038613691 (0.0979013482513) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0863438043477) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950584795322 (0.0454007986272) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.680383556932 (0.103539551977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927375730994 (0.0610465576011) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.864882180943 (0.0282754310955) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.72467750258 (0.0766390396192) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910681114551 (0.0637486419726) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949890350877 (0.0381682735823) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877966976264 (0.058793962861) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94470244238 (0.0342638570703) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.850154798762 (0.0853926590479) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.101845759184) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.931985294118 (0.0548899386007) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.839336085311 (0.107746545711) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.101845759184) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.78260878913 (0.109434676193) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0525497907586) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861627106983 (0.116279879338) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.862211902305 (0.102862524229) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910681114551 (0.0637486419726) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.665540075679 (0.132171415981) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.829205366357 (0.10674467963) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.752747678019 (0.105438071845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.855635104919 (0.0995983870641) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921534227726 (0.0583708595885) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911042311662 (0.0619508291366) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0362241066736) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933918128655 (0.0479246812832) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.883591331269 (0.0909584862284) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.777162882697 (0.0888472832457) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8674750602 (0.103962298585) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.787613949088 (0.0748730263064) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.133171105359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.860272617819 (0.0702821642909) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950257997936 (0.0380647216643) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.873684210526 (0.109348906747) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884468524252 (0.0811050406361) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878001375989 (0.0641634659816) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.91038871689 (0.0851830891022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.804280615755 (0.0728626234004) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0390757291364) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922807017544 (0.07089301736) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.671095631235 (0.121132815144) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.754136566907 (0.0841189023974) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.777238132095 (0.0763014268294) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0357391453974) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.920472136223 (0.0463230376652) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.814697282422 (0.0700967309082) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.871499828001 (0.0843052777661) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.10983394852) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.868128654971 (0.0947607543282) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933223684211 (0.0538867276929) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.853076625387 (0.0768404418538) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.809911420709 (0.104585442587) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933556931545 (0.0639695718376) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.823030615755 (0.0903546752933) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.904717062264 (0.0653710533321) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861007911937 (0.0757159530331) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.735537065703 (0.0867287360536) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736994754042 (0.0799772358441) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.883264533884 (0.0722701316448) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.844599243206 (0.0844944093882) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878149724802 (0.0965893105874) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.899604403165 (0.0609167092256) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.0947474352917) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736633556932 (0.0468892765493) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.87829377365 (0.0677056673414) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.811448658411 (0.108946375431) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916529067767 (0.0760187239693) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.87306501548 (0.0810363992167) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877599329205 (0.0514263539872) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.855779153767 (0.0827220493446) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0571826905791) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.800447196422 (0.115505977858) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961076711386 (0.0356160146865) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.872119023048 (0.0827424314956) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0441394851439) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.886812005504 (0.0449301265667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921534227726 (0.0583708595885) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895287237702 (0.0859862666404) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.860272617819 (0.0702821642909) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.850154798762 (0.104859953857) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884176126591 (0.0860951031698) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866924664603 (0.0830250399535) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926722136223 (0.0439202073737) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915611025112 (0.0571274943078) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.870912882697 (0.0761762738485) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926722136223 (0.026351787691) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.872772617819 (0.0925519801181) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.834141726866 (0.0874767162514) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933918128655 (0.0539820250334) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895029239766 (0.0763538700895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933223684211 (0.0478173135049) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.792842707258 (0.0763286371985) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.663205194358 (0.141110043398) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.868094255246 (0.108380602162) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0630793316873) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933223684211 (0.0478173135049) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.822342621259 (0.112596438352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0504653723412) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.890350877193 (0.108984339544) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916271069831 (0.0581766778977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0455185706439) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.713899638803 (0.100774286109) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.804723512212 (0.0896027488243) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.862865497076 (0.0968313163185) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921785775714 (0.0435896045832) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878035775714 (0.092154013713) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927341331269 (0.0492909159115) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.784324475404 (0.149566119294) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900842793258 (0.0906510177249) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910640264878 (0.0656301145371) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.720912882697 (0.0690063380546) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938854489164 (0.0524256912875) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.89861756106 (0.0554195134452) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.654428964568 (0.124374190269) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900550395597 (0.068390546125) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867801857585 (0.0911778381958) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.703592621259 (0.0610373121334) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922153422773 (0.0445823087728) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.663205194358 (0.141110043398) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878035775714 (0.092154013713) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922772617819 (0.0552074859158) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.717481510148 (0.110759802032) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922112573099 (0.0789599652204) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.845579635363 (0.0967031821025) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.0979508062498) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944736842105 (0.0430420877674) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888968438252 (0.0891023387622) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.594074647403 (0.175626844317) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916924664603 (0.105920769057) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.817004213966 (0.114050591856) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921751375989 (0.0496580641178) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938486842105 (0.0678219293354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.675195648435 (0.0999615223873) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.928328173375 (0.0597196981953) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.613497592019 (0.11011178628) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.539525283798 (0.137980568019) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905703904369 (0.0581015533875) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.893605951152 (0.0450834693347) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0623469650624) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932896886825 (0.0407779212169) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911007911937 (0.062132997769) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.123553257748) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.917217062264 (0.0608451325573) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.90515995872 (0.062205803354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.858597781218 (0.0544995190993) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927048933609 (0.0353178643097) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.653300223598 (0.095267003813) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905703904369 (0.0678996200819) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736633556932 (0.0468892765493) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916563467492 (0.0623900654494) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888418042656 (0.0595453163075) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.917251461988 (0.0618757943989) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.87306501548 (0.101343977136) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911001461988 (0.0706942116386) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.855417956656 (0.0939019930899) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0386924419525) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938527691778 (0.0469386230249) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.71013501892 (0.0676722527449) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915978672171 (0.0585694208896) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861334709322 (0.0865367041858) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.654428964568 (0.124374190269) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.906398348813 (0.0726370695967) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944375644995 (0.0556933669295) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916924664603 (0.0792523672365) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927674578603 (0.0707525596207) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.738934038528 (0.0951891670591) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922772617819 (0.0605404860549) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.857567939456 (0.118935635694) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.62263501892 (0.0671636457649) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905486756106 (0.0559219478306) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900842793258 (0.0758186732414) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.783262383901 (0.117526653356) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.811448658411 (0.108946375431) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.781916494668 (0.0873082084984) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.844926040592 (0.0939732296652) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910640264878 (0.0656301145371) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910347867217 (0.0709254648109) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915944272446 (0.0694687963514) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.917543859649 (0.0786631226889) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911661506708 (0.0700853006433) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878947368421 (0.0910873859012) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.687545149639 (0.0945935946661) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884502923977 (0.0964491313452) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856690746474 (0.103960379209) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.753592621259 (0.0912985604982) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.725262297902 (0.12271707686) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.537457000344 (0.165201567462) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.800154798762 (0.11382238024) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93388372893 (0.0465986905075) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.736994754042 (0.0799772358441) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.843795149639 (0.0976928300545) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.883264533884 (0.0722701316448) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.966632266942 (0.0368981749401)
##################################################
## Algorithm
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.92763372893 (0.0481022974426) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 403, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 403, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 403, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:03 2019
PID: 26471                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.725447196422 (0.0771186788733) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938744840041 (0.0506354192735) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 414, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 414, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 414, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:05 2019
PID: 26517                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 415, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 415, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 415, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:06 2019
PID: 26555                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:08 2019
PID: 26594                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960416666667 (0.0560782700923) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 428, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 428, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 428, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:10 2019
PID: 26631                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960416666667 (0.0560782700923) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939439284486 (0.0441505726765) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 432, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 432, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 432, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:12 2019
PID: 26671                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.838968438252 (0.0672402839325) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 436, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 436, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 436, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:14 2019
PID: 26708                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93845244238 (0.028885202632) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 439, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 439, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 439, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:16 2019
PID: 26747                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.747377020984 (0.0858038822643) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.928912968696 (0.0789316677697) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 444, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 444, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 444, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:18 2019
PID: 26784                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933591331269 (0.0478628906347) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.904540763674 (0.0772019037944) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 459, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 459, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 459, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:21 2019
PID: 26823                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.57881621947 (0.0388318016613) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 461, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 461, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 461, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:22 2019
PID: 26859                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.928035775714 (0.0348349828487) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 465, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 465, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 465, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:24 2019
PID: 26900                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.843863949088 (0.060853931263) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0629780983098) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 469, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 469, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 469, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:26 2019
PID: 26936                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.730710354317 (0.0759113160125) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0546855080177) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 475, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 475, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 475, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:28 2019
PID: 26975                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.838968438252 (0.0672402839325) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 479, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 479, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 479, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:30 2019
PID: 27012                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0455185706439) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938744840041 (0.0506354192735) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 485, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 485, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 485, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:32 2019
PID: 27052                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939439284486 (0.0564255347241) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 491, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 491, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 491, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:34 2019
PID: 27088                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961076711386 (0.0500306746245) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 496, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 496, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 101, ...}, 'iteration': 496, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:36 2019
PID: 27126                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0455185706439) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 502, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 502, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.07984495162963867, 'iteration': 78, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 502, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:38 2019
PID: 27165                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93845244238 (0.0518286289896) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.843863949088 (0.060853931263) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.675488046096 (0.0782974489207) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960416666667 (0.0560782700923) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 538, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 538, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 538, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:44 2019
PID: 27203                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 542, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 542, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 542, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:46 2019
PID: 27241                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.922772617819 (0.0425828439622) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 554, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 554, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 554, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:48 2019
PID: 27279                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.725447196422 (0.0639956153132) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.742113863089 (0.0878777989059) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 561, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 561, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 561, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:51 2019
PID: 27318                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 566, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 566, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 566, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:53 2019
PID: 27354                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93388372893 (0.0394227600048) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 574, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 574, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 574, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:56 2019
PID: 27394                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:58 2019
PID: 27431                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861919504644 (0.0807899636139) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 579, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 579, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '026a197483d52e3593c92fc6bb746f37e05fc50a': 31, ...}, 'iteration': 579, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:50:59 2019
PID: 27467                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_240.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 60
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=60, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '024d0499457b5c9c5cbfd17647d41a00e1ae4ba4': 585, ...}, 'iteration': 585, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '024d0499457b5c9c5cbfd17647d41a00e1ae4ba4': 585, ...}, 'iteration': 585, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'ec3964dca41e1d906cef2f1232c4e8733f9556fc', 'config': '9149628575a39a533f22d82d25d708e94e30c570', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08117794990539551, 'iteration': 513, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6f951529f0c929d71a46bc0d06931d77d42b0b49', 'pipeline': '1ed24164412ae76bf2894491366116f04db310a3'}, 'duration': 0.1497058868408203, 'iteration': 0, 'loss': 0.22001848985208117, 'max_history_score': 0.7799815101479188, 'max_history_score_std': 0.09959206257661732, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.7799815101479188, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '314d7aed23211c81715ab537be05bfaf0a735794', 'pipeline': 'c2b4e12523a2c912dbba229778ad29e44a879655'}, 'duration': 0.0975029468536377, 'iteration': 1, 'loss': 0.045465686274509864, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9545343137254901, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '913cc4a0d20a09508c15b8c01df158ba331c4aeb', 'pipeline': 'b41744fedd8629d6437e755d7740aa741697b8a0'}, 'duration': 0.2037501335144043, 'iteration': 2, 'loss': 0.08369453044375652, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9163054695562435, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6d586c695930eb842d0f7ccf19c62c21672c8863', 'pipeline': 'b67de47f09fac26d5cbec2a30e12255ca21c8489'}, 'duration': 0.13318896293640137, 'iteration': 3, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ad91fecc6d4230b68c476bff640c1cf583d55180', 'pipeline': 'c5cd9b8af915720cb46e4b568e6ad60706daf584'}, 'duration': 0.05516409873962402, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', 'pipeline': '65c5647923e0274841ff2df8f41b9391d848e00d'}, 'duration': 0.09405207633972168, 'iteration': 5, 'loss': 0.088998538011696, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.911001461988304, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '9698bd3c92c21477e453abd88a5198b3377fe092', 'pipeline': 'dd0772bf8c6ecdd1577ac87d9c83babe7d108855'}, 'duration': 0.7616639137268066, 'iteration': 6, 'loss': 0.22086343309253542, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.7791365669074646, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', 'pipeline': '7ae97987902794414233cd3a066c256466eb277f'}, 'duration': 0.5316128730773926, 'iteration': 7, 'loss': 0.155297557619539, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.844702442380461, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '322eb8352a335d429e3b527e3c682fd0afdb3ab9', 'pipeline': '10d3ad03ea666a63704e7905a04fe6279b99d0b3'}, 'duration': 0.5637638568878174, 'iteration': 8, 'loss': 0.15909872721018237, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8409012727898176, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4aa8a800826d16e0f2067aff86251e69f905ba6a', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.21076107025146484, 'iteration': 9, 'loss': 0.1324905400756794, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8675094599243206, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'pipeline': 'ef7f152f5a248947222cbd21900f743e63714f84'}, 'duration': 0.09511590003967285, 'iteration': 10, 'loss': 0.11056071551427582, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8894392844857242, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cef4e6a640ea38e28c22805aeadbb86da175c485', 'pipeline': 'e684c4c2fc53c2c530b54ec4c248670010e8963d'}, 'duration': 0.06718802452087402, 'iteration': 11, 'loss': 0.061472308221534155, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9385276917784658, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', 'pipeline': 'd6d4e7ec06d5634a3d166eb691c917071e8ad70f'}, 'duration': 0.06645584106445312, 'iteration': 12, 'loss': 0.1108531131750945, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', 'pipeline': '9bef18060ffc0ba4d4c96b6252046c9803ab39ea'}, 'duration': 0.0703439712524414, 'iteration': 13, 'loss': 0.09396929824561406, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9060307017543859, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '87799aafd9260d2809677e4f67a29190d2c71ac1', 'pipeline': '02f04d169af7b45f1e7beaff911cc1433adeccd6'}, 'duration': 0.08438515663146973, 'iteration': 14, 'loss': 0.12108703130374965, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.8789129686962504, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'pipeline': '9aa6434a42374f34aebcece9994a411ce7c175c6'}, 'duration': 0.7277698516845703, 'iteration': 15, 'loss': 0.40290247678018576, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.5970975232198142, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', 'pipeline': '397ebcaec75fa2b7c9f14e1e8a65f2384f5b6f4b'}, 'duration': 0.0792078971862793, 'iteration': 16, 'loss': 0.27970631234950116, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.7202936876504988, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'pipeline': '351481815e087a7078ebb33c1226d90382bfd9a5'}, 'duration': 0.09555196762084961, 'iteration': 17, 'loss': 0.1152046783625732, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8847953216374268, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', 'pipeline': 'd2a68bfda6fcdec4ae0ffc7d7b6a2122bc1cd673'}, 'duration': 0.6554441452026367, 'iteration': 18, 'loss': 0.13928448572411423, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8607155142758858, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '83008f37eab3972c2f6b3f8434bce37e9a79d401', 'pipeline': '0818b99ceb56bcf9a0d28f21feee522c0f885a3c'}, 'duration': 0.1081089973449707, 'iteration': 19, 'loss': 0.13804609563123493, 'max_history_score': 0.9545343137254901, 'max_history_score_std': 0.0487157144722032, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.8619539043687651, ...}, ...], 'history_hash': ['6f951529f0c929d71a46bc0d06931d77d42b0b49', '314d7aed23211c81715ab537be05bfaf0a735794', '913cc4a0d20a09508c15b8c01df158ba331c4aeb', '6d586c695930eb842d0f7ccf19c62c21672c8863', 'ad91fecc6d4230b68c476bff640c1cf583d55180', '4d2a1182bfff83f7b7ad487d5eeef67f0be7f49f', '9698bd3c92c21477e453abd88a5198b3377fe092', '4c0b5ef2bc81a93cee8613016cac14d92b99d2a6', '322eb8352a335d429e3b527e3c682fd0afdb3ab9', '4aa8a800826d16e0f2067aff86251e69f905ba6a', '3e7ee0b8c0e55ae432f874ca3794468e6bb0bcc6', 'cef4e6a640ea38e28c22805aeadbb86da175c485', '2f3328a193f4f630205ae5e8a70d7055b02cf3aa', '5854d9c32a94a385daf6b2eba5a4e5cabea18d4a', '87799aafd9260d2809677e4f67a29190d2c71ac1', '0b264c39982cfa76e88dc014ec5dccdc0ca56f08', 'ead29a5e0bf9e15a4da1515421b67ab70b03da98', '79d79c2c3735d6edf90bb9a0f50b18c7414dac48', 'ac7ddb454885edbeb3f6e4ea59686a1144a338a2', '83008f37eab3972c2f6b3f8434bce37e9a79d401', ...], 'history_index': {'000f6753f5f0f1d38a52bf64cd77e44e28988a78': 233, '0075a4c55487c2db50707935d550abf05e552fb1': 86, '007abd6f144273ef13f20038132bf05537246428': 501, '0099c7a4e75f9b4dceeee1110c813cea18162b3d': 35, '010e96682adcdaf7f072af6e58db02cb85414fb0': 308, '0149a40c0ad017848a2e93afa9b4c741c9558a8e': 393, '01c2352554ccbefb24d7749c382765fb4aee0eec': 255, '020354d24731d9ead32f56f0a0062f5cb6461641': 277, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 156, '024d0499457b5c9c5cbfd17647d41a00e1ae4ba4': 585, ...}, 'iteration': 585, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 240, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Jun  6 11:51:01 2019
PID: 27506                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": null, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 2, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
