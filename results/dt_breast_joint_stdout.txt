SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_breast_joint", 
    "policy": null, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "breast", 
        "policy": "joint", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Breast with Joint policy"
}
Best score: 0.669105954542 (0.0758619602045) [J] | Score: 0.669105954542 (0.0758619602045) [J]
Best score: 0.905217785844 (0.0451364155258) [J] | Score: 0.905217785844 (0.0451364155258) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.924425287356 (0.0330485209381) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.567641085472 (0.063454099156) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.432447498055 (0.0505675544517) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.86993885576 (0.053913377943) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.83524868205 (0.0455863259621) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.428712946158 (0.167089729315) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.695647523982 (0.0578018538204) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.745504926108 (0.113614532176) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.890776510241 (0.0837192989189) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.674832555527 (0.0318056877311) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.877111960937 (0.0694923959942) [J]
Best score: 0.924425287356 (0.0330485209381) [J] | Score: 0.850329487512 (0.0427632203349) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.945698297468 (0.0333029955908) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.713040143462 (0.0575615596491) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'normalizer': 2, 'rebalance': 0, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'normalizer': 2, 'rebalance': 0, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e'], 'history_index': {'2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a': 12, '5ae32bd32953af04b3fed1424eedcfb9d3cabf98': 5, '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd': 9, '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b': 3, '708d9e9a998ee07907ac4c5de29d2f3db04a6af2': 14, '781eac26ada8f156ea4d01b7d8e6af83748b7ccc': 4, '845b8bc860599df5d7b600890fb8c2e89a662c1e': 0, '8a556fbb5f0562a757fb772dcca73b11dc651a9e': 15, '8bc535d82ba1f2fdaf9269392dac15794d546022': 13, ...}, 'iteration': 15, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e'], 'history_index': {'2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a': 12, '5ae32bd32953af04b3fed1424eedcfb9d3cabf98': 5, '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd': 9, '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b': 3, '708d9e9a998ee07907ac4c5de29d2f3db04a6af2': 14, '781eac26ada8f156ea4d01b7d8e6af83748b7ccc': 4, '845b8bc860599df5d7b600890fb8c2e89a662c1e': 0, '8a556fbb5f0562a757fb772dcca73b11dc651a9e': 15, '8bc535d82ba1f2fdaf9269392dac15794d546022': 13, ...}, 'iteration': 15, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e'], 'history_index': {'2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a': 12, '5ae32bd32953af04b3fed1424eedcfb9d3cabf98': 5, '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd': 9, '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b': 3, '708d9e9a998ee07907ac4c5de29d2f3db04a6af2': 14, '781eac26ada8f156ea4d01b7d8e6af83748b7ccc': 4, '845b8bc860599df5d7b600890fb8c2e89a662c1e': 0, '8a556fbb5f0562a757fb772dcca73b11dc651a9e': 15, '8bc535d82ba1f2fdaf9269392dac15794d546022': 13, ...}, 'iteration': 15, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:50:32 2019
PID: 15836                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('normalizer',...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 6.67385514e+00],
       [ 3.89202763e+0...    [ 8.67790599e+00],
       [-8.06808284e+00]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 6.67385514e+00],
       [ 3.89202763e+0...    [ 8.67790599e+00],
       [-8.06808284e+00]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 6.6738553e+00],
       [ 3.8920276e+00]...60e+00],
       [-8.0680828e+00]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.0 (0.0) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.892902514908 (0.0461172073298) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.676620430386 (0.129632371159) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.910448535131 (0.05211896146) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.928119868637 (0.0269642181951) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.929844006568 (0.0255658407418) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.935169821104 (0.0214987519448) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.926365482672 (0.0196407029565) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.917437991531 (0.0332832369795) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.647897761645 (0.102215312395) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.894688229194 (0.0367148232196) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.906784201884 (0.0402490047836) [J]
Best score: 0.945698297468 (0.0333029955908) [J] | Score: 0.944004407571 (0.0306624044441) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.95099386397 (0.0336644453966) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.901800838303 (0.0288482804323) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.894596404805 (0.0428023028695) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.94932914182 (0.0347218728241) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.922703309999 (0.0247295500807) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.93861701668 (0.0357164561722) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.884280744966 (0.0538689871629) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.906971091522 (0.0242938238381) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.912141344741 (0.0539071619212) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.908695229453 (0.0388492868545) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.864546063434 (0.068869885827) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.936893959036 (0.0289090138704) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.7029081324 (0.0302780647589) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.914021043989 (0.051971092589) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.906909515167 (0.0376660442382) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.630875680581 (0.00894499941948) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.935076916429 (0.0232096123708) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.595685334025 (0.0659466444046) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.903429910984 (0.0455687160114) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933386267393 (0.0329078619448) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.748305029816 (0.102279125206) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.894595324518 (0.0322654793434) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.87529167747 (0.0503770892978) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.90869630974 (0.0534891760039) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.901553452597 (0.0418564537227) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.910482024026 (0.0459114513531) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.935046668395 (0.0243980084717) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.608308486734 (0.096466155002) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 2, 'normalizer': 1, 'normalizer_StandardScaler_normalizer__with_mean': 1, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 56, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 56, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 56, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:51:12 2019
PID: 15906                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[1.52400000e+02, 2.55000000e-01],
       ...6e-01],
       [1.67732660e+02, 1.98799743e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[1.52400000e+02, 2.55000000e-01],
       ...6e-01],
       [1.67732660e+02, 1.98799743e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[1.5239999e+02, 2.5500000e-01],
       [1...  [1.6773267e+02, 1.9879974e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.0 (0.0) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.894595324518 (0.0378495264196) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.908756805808 (0.0456984115181) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933291202143 (0.0199352839438) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.926149425287 (0.0271395377035) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.891120041483 (0.0336380650041) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.947390026791 (0.0244359736957) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.921225477487 (0.0379661345824) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933352778498 (0.0276455978347) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.943975239824 (0.0253064882032) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 3, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 3, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 66, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 66, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, '22912c0802d709db3d433f86a9a23b1a05935421': 16, '2a1c48ac7f2936eeec176d796d98148b1fbb06f8': 11, ...}, 'iteration': 66, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:51:20 2019
PID: 15982                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 1.77507299],
       [ 0.95489959],
    ...56],
       [ 1.14026501],
       [ 1.50315078]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.77507299],
       [ 0.95489959],
    ...56],
       [ 1.14026501],
       [ 1.50315078]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.775073  ],
       [ 0.9548996 ],
    ....140265  ],
       [ 1.5031508 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.0 (0.0) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933384106819 (0.0225837283578) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.912512963443 (0.0418853828188) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.915744101633 (0.0316207907427) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.898476795437 (0.0527893625172) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.926519963702 (0.0483148825064) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.9297835105 (0.0233034144874) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.882530680149 (0.0427186026831) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 3, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 3, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, ...}, 'iteration': 74, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, ...}, 'iteration': 74, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, '2061c80dc2dc4ae1b76c2bf15004d9eafade1a56': 40, '2114fa78999fda0bb0bfb78e4317cea788428476': 47, ...}, 'iteration': 74, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:51:30 2019
PID: 16045                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 7.84134414e-01,  3.92360286e-01],
     ...-01],
       [-9.86504217e-01,  1.99670275e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 7.84134414e-01,  3.92360286e-01],
     ...-01],
       [-9.86504217e-01,  1.99670275e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 7.84134388e-01,  3.92360300e-01],
     ...9.86504197e-01,  1.99670270e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [1.],
       [1.],
       [1.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.0 (0.0) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.921039668136 (0.0247172725735) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.901772750843 (0.0491802394363) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.678038847118 (0.0490347444833) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.913896810993 (0.0369827673673) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.924519272319 (0.0258295914335) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.921038587849 (0.0269007483307) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.372572595281 (0.00441189245975) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.91389789128 (0.0348581239229) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.915930991271 (0.0374030718372) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.928212773313 (0.0301122324231) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.92276272578 (0.0359855953433) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.912481635122 (0.0509040922093) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.890592861464 (0.0669287570281) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.943941750929 (0.0343522075643) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.698282343791 (0.145879892549) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.86993885576 (0.053913377943) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.935107164463 (0.0318621126426) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.898230490018 (0.0285375735742) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.903308918849 (0.0387929197148) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 3, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 3, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '122168d90a57aa4de5cef574258cc8e3297f727b': 88, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, ...}, 'iteration': 94, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '122168d90a57aa4de5cef574258cc8e3297f727b': 88, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, ...}, 'iteration': 94, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': '139dba12819b353a4a5503c7de220a1b06a9a61d', 'config': '3aa2177397cf2ae50ec898c2f8d07a3b8c0ade15', 'pipeline': 'e18fa4372a870759d45b8ad3ca497aaf8d70f816'}, 'duration': 0.31651997566223145, 'iteration': 29, 'loss': 0.049006136029729364, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9509938639702706, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'031b1631fc425216de454269918447e52e72ca68': 68, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '122168d90a57aa4de5cef574258cc8e3297f727b': 88, '15c79d176889b8754dead8f60f4edd3106763416': 39, '16212f39a60b1682b931da1e592bccbf1ee6620a': 24, '1729b96664aa075f869dae0575b1ecc5b6e2ab15': 70, '1fd2a82a4d3e408289e13a0337f21323c58f79d5': 49, ...}, 'iteration': 94, 'max_history_score': 0.9509938639702706, 'max_history_score_std': 0.03366444539655266, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:51:47 2019
PID: 16114                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 7.85556875e-01],
       [ 3.01220628e-0...    [-2.75972246e-01],
       [-9.90158113e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 7.85556875e-01],
       [ 3.01220628e-0...    [-2.75972246e-01],
       [-9.90158113e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 7.85556853e-01],
       [ 3.01220626e-0...7e-01],
       [-9.90158141e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [1.],
       [1.],
       [1.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.0 (0.0) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.90856991617 (0.0442980178512) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.669353340247 (0.0568212271577) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.593238484141 (0.118278409494) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.931413663469 (0.0201012442414) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.912142425028 (0.0293226842256) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.938586768646 (0.0360084171471) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.852512747386 (0.0537090299784) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.894223705816 (0.0675186661874) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.910634344482 (0.0428049126839) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.499646746176 (0.120097399541) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.891087632875 (0.0390417950629) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.908477011494 (0.037999934421) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.901556693458 (0.034719824472) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.920977011494 (0.03040887764) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.884097096189 (0.0462926849991) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.908695229453 (0.0429379947787) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.868058076225 (0.0369890943899) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.931413663469 (0.0371918544139) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.622164246824 (0.0150023939875) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.882343790511 (0.0411406495807) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933385187106 (0.0299105633672) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.597231224613 (0.0951243139911) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.642969492697 (0.0545203937619) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.901862414657 (0.0351935715) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.920823610751 (0.0278346418632) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.93341543514 (0.0238790675212) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.719045458474 (0.130625736914) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.919255034137 (0.0323759018129) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.86796841241 (0.0483234804872) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.93159947282 (0.0193670958563) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.915806758275 (0.0296682454022) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.883852951344 (0.0501717444074) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.91054360038 (0.0435024571683) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.883944775732 (0.0378768265828) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.91220508167 (0.0385250765134) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.820685334025 (0.0553648201242) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.724274047187 (0.0224576437636) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.910514432633 (0.0209228097647) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.906785282171 (0.0355412611974) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.887576700372 (0.0439719875507) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.924612176994 (0.0229896282688) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.93159947282 (0.0462097158522) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.884039840982 (0.0444503624282) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.924518192032 (0.0327878452966) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.933322530464 (0.0431870693102) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.9297835105 (0.0300661946336) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.912299066632 (0.0388315496661) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.921100164204 (0.03911710068) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.845404459424 (0.0368118646476) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.894502419843 (0.0404689174199) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.936831302394 (0.0340588509862) [J]
Best score: 0.95099386397 (0.0336644453966) [J] | Score: 0.919255034137 (0.0303346838912) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.954532883934 (0.0338551649169) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 148, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 148, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 148, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:52:35 2019
PID: 16194                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-5.20109993],
       [-1.58059371],
    ...84],
       [ 0.31981428],
       [ 4.60781254]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-5.20109993],
       [-1.58059371],
    ...84],
       [ 0.31981428],
       [ 4.60781254]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-5.2011    ],
       [-1.5805937 ],
    ....31981426],
       [ 4.6078124 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [1.],
       [1.],
       [1.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.701275818857 (0.079064173559) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.898135424769 (0.0391113094706) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.9331378014 (0.0272326248147) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.903309999136 (0.0409613007741) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929844006568 (0.0338603954801) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 3, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 2, 'features_SelectKBest_features__k': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 3, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 154, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 154, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, '0f9841c5a4b877c7d6bce8f2201785aef7e948d7': 98, ...}, 'iteration': 154, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:52:42 2019
PID: 16289                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[1.69619671, 1.10530679],
       [0.88474...7, 0.81166901],
       [0.89964   , 0.34410421]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[1.69619671, 1.10530679],
       [0.88474...7, 0.81166901],
       [0.89964   , 0.34410421]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[1.6961967 , 1.1053067 ],
       [0.88474...
       [0.89964   , 0.3441042 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.868309783078 (0.0459926400136) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917499567885 (0.0288189333323) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.906878186846 (0.0392626698572) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.915744101633 (0.05132563601) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.912418978481 (0.0459157074408) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.936830222107 (0.0303297787863) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.892780442486 (0.0388232132823) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.91405237231 (0.0467707523422) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 0, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 1, 'normalizer': 0, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 163, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 163, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 163, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:52:53 2019
PID: 16352                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[  161.52917342],
       [ -465.76876164]...      [ -535.4097479 ],
       [ -946.96127194]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[  161.52917342],
       [ -465.76876164]...      [ -535.4097479 ],
       [ -946.96127194]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[  161.52917 ],
       [ -465.76877 ],
  ...5.4097  ],
       [ -946.96124 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [1.],
       [1.],
       [1.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.901709013914 (0.0430384177141) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.924518192032 (0.0384602978818) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.772937732262 (0.0673215437921) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.933445683173 (0.0362919560985) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.915898582664 (0.0383119880619) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917560063953 (0.0352711520339) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.822285238959 (0.0835205686042) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.945821450177 (0.0390312033483) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.924426367643 (0.0285712647185) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.894626652839 (0.0447139756663) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.905155129202 (0.0444730062175) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.903430991271 (0.0312731656221) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.915683605566 (0.0309842832727) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.884222409472 (0.0446630275621) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.938400959295 (0.0286022374913) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'normalizer': 2, 'rebalance': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 179, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 179, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0df8a670551e78df9d9677969f81ecf3caf7bec8': 155, '0ef4b55f541d128e47a29abb8addc837446e62a3': 90, ...}, 'iteration': 179, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:53:09 2019
PID: 16418                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 4.85036673e+00,  1.73892481e+00],
     ...-02],
       [-1.13948327e+00,  2.55546273e+00]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 4.85036673e+00,  1.73892481e+00],
     ...-02],
       [-1.13948327e+00,  2.55546273e+00]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 4.8503666e+00,  1.7389249e+00],
       ...[-1.1394832e+00,  2.5554628e+00]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [1.],
       [1.],
       [1.],
       [1.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926459467635 (0.0424682390286) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.885976795437 (0.0445765956469) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.906910595454 (0.0445380858844) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929658197217 (0.0343067632734) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.92990666321 (0.0228372523935) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917437991531 (0.0499308544381) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.936678981938 (0.021098157541) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.871417768559 (0.0456305747246) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.950962535649 (0.0288131863709) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.894566156771 (0.034347111697) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.928244101633 (0.0355896778537) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.910325382422 (0.0399384206058) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917592472561 (0.0349032787865) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.9157138536 (0.0368184602222) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.901769509982 (0.0405880244366) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.885888211909 (0.071533958973) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.907001339556 (0.0264772450034) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.894566156771 (0.0422715107846) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.901644196699 (0.0456710582127) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.95280982629 (0.0308970967085) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.912142425028 (0.0435108653989) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929658197217 (0.0366682938823) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917470400138 (0.0245144464401) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.908634733385 (0.0219259358489) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.864299758016 (0.0760186071294) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.942219773572 (0.028964471701) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.889302998877 (0.0351304025867) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929844006568 (0.0361897766801) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917624881168 (0.0424859616873) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.915647956097 (0.0497263475805) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.922886958776 (0.0361436802282) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.93680105436 (0.0193198132972) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.873381730188 (0.0631521669091) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.914021043989 (0.0368810397184) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.67474721286 (0.0634087156942) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.931351006827 (0.0280198128732) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.905123800882 (0.0396767705196) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.905279362199 (0.0215832873424) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.907096404805 (0.032621251816) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.931536816178 (0.0394584908234) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.890964480166 (0.0480714263193) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.882160141734 (0.0435111617737) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.899796906058 (0.0343860253207) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.910728329444 (0.0394127858164) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.915744101633 (0.0328776493958) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929721934146 (0.0293517019827) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.921163901132 (0.0277796718541) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.877298850575 (0.0404428127785) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.919346858526 (0.0279481808505) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.788798504883 (0.0589602827613) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.896320542736 (0.0388251637416) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.922886958776 (0.0265969750825) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917558983666 (0.0389714055762) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.928028044249 (0.0350244022067) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.891457091003 (0.0477645198514) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.92470508167 (0.0307660631075) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.938464696223 (0.0141606133002) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.879972560712 (0.0611673355659) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 3, 'features_FeatureUnion_features__pca__n_components': 0, 'features_FeatureUnion_features__selectkbest__k': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'normalizer': 2, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 3, 'features_FeatureUnion_features__pca__n_components': 0, 'features_FeatureUnion_features__selectkbest__k': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'normalizer': 2, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0db1f39d58bcb3a9e86cc98fa947429cc5ddb2ff': 189, ...}, 'iteration': 238, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0db1f39d58bcb3a9e86cc98fa947429cc5ddb2ff': 189, ...}, 'iteration': 238, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, '0db1f39d58bcb3a9e86cc98fa947429cc5ddb2ff': 189, ...}, 'iteration': 238, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:54:07 2019
PID: 16492                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[1.73184979, 6.11584385],
       [0.92357...7, 1.22073284],
       [1.28013501, 5.95706923]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[1.73184979, 6.11584385],
       [0.92357...7, 1.22073284],
       [1.28013501, 5.95706923]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[1.7318498 , 6.115844  ],
       [0.92357...
       [1.280135  , 5.9570694 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.910635424769 (0.0309308226971) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.927903811252 (0.0486072615524) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.913990795955 (0.0269683525548) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.933199377755 (0.0408881680068) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.942095540576 (0.0279826947185) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929626868896 (0.0299001783072) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929905582923 (0.0253534449416) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.940340074324 (0.0303670096311) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.757457220638 (0.067719896373) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.921102324777 (0.0363692907637) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926366562959 (0.0306573980614) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.924456615677 (0.0321857418018) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926056520612 (0.0322282249223) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.855653141474 (0.0516504861974) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.889453158759 (0.0542777250062) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.898012272059 (0.0341993786593) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.889239261948 (0.0458813183073) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.876770590269 (0.0459534001596) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926242329963 (0.0280149665613) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.920852778498 (0.0345402006043) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929812678247 (0.0349900577055) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.905280442486 (0.05946816246) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.935201149425 (0.0297559165271) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.896413447412 (0.0410378727347) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.89632270331 (0.0380703993895) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.87695639962 (0.0526318371446) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.942127949183 (0.025805332935) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917563304814 (0.0396498579689) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 3, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'features': 2, 'features_SelectKBest_features__k': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 1, 'normalizer': 2, 'rebalance': 3, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 267, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 267, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 267, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:54:38 2019
PID: 16580                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 1.08751125],
       [ 0.39369055],
    ...55],
       [ 0.56058409],
       [ 0.94330857]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.08751125],
       [ 0.39369055],
    ...55],
       [ 0.56058409],
       [ 0.94330857]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 1.0875113 ],
       [ 0.39369056],
    ....56058407],
       [ 0.9433086 ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.832504753262 (0.0713484970944) [J]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')...='./scenarios/dt_breast_joint.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Joint.run of <experiment.policies.joint.Joint object>>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/joint.py in run(self=<experiment.policies.joint.Joint object>, X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]))
     32             algo=tpe.suggest, 
     33             max_evals=None,
     34             max_time=self.config['time'],     
     35             trials=trials,
     36             show_progressbar=False,
---> 37             verbose=0
     38         )
     39 
     40         best_config = self.context['best_config']
     41         super(Joint, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 300
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'algorithm': {'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, 'pipeline': {'features': <hyperopt.pyll.base.Apply object>, 'normalizer': <hyperopt.pyll.base.Apply object>, 'rebalance': <hyperopt.pyll.base.Apply object>}}, algo=<function suggest>, max_evals=9223372036854775807, max_time=300, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 2, 'normalizer': 3, 'rebalance': 3, ...}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'features': 1, 'features_PCA_features__n_components': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 2, 'normalizer': 3, 'rebalance': 3, ...}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_joint(wconfig={'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 269, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300})
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
    110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
    111 
    112 def objective_joint(wconfig, algorithm, X, y, context, config):
--> 113     return objective(wconfig['pipeline'], wconfig['algorithm'], algorithm, X, y, context, config, step='joint')
        wconfig = {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}}
        algorithm = 'DecisionTree'
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        context = {'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 269, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}
    114 
    115 
    116 def get_baseline_score(algorithm, X, y, seed):
    117     pipeline, _ = pipeline_conf_to_full_pipeline(

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), context={'baseline_score': 0.9281220292109584, 'baseline_score_std': 0.03249239026256471, 'best_config': {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eb7cd5fc1ec1129ebeecbce1f1610ce2ff720dd8', 'config': 'c01f89f896893bf01c7637572d16508ad253075b', 'pipeline': '7aed44862b3b725d3073df7130211c2f67bed487'}, 'duration': 0.8577699661254883, 'iteration': 148, 'loss': 0.04546711606602716, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9545328839339728, ...}, 'history': [{'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'b766ba81fac326c4559d84f5f5d5b351779cecee', 'config': '845b8bc860599df5d7b600890fb8c2e89a662c1e', 'pipeline': 'c15842433bd4a9576c7041e54cb000b6e07e5ba3'}, 'duration': 3.1345272064208984, 'iteration': 0, 'loss': 0.3308940454584738, 'max_history_score': 0.6691059545415262, 'max_history_score_std': 0.07586196020449495, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.6691059545415262, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '6158b7b407267a1b19fed622939ccff90db0d200', 'config': 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', 'pipeline': '6fe774615fd71c43ae1c1be205eab38538e7091a'}, 'duration': 0.2267608642578125, 'iteration': 1, 'loss': 0.0947822141560799, 'max_history_score': 0.9052177858439201, 'max_history_score_std': 0.04513641552581858, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9052177858439201, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '2699f14abf3d4b726fac7986639b5650afdef1b0', 'config': '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', 'pipeline': '3ab0ab758a41df508d71982b0d97da61e1ad7739'}, 'duration': 0.2820589542388916, 'iteration': 2, 'loss': 0.0755747126436781, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.9244252873563219, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': '61856fc04afa9b5879127767876312d8f693ef98', 'config': '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', 'pipeline': 'abc1a203e1f369bfadb7c91dabaae2736781cada'}, 'duration': 0.1086568832397461, 'iteration': 3, 'loss': 0.4323589145276986, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.5676410854723014, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': 'a38807dcf3e4daeab38f919fd158543043cfdc16', 'config': '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', 'pipeline': 'bbab4380885d9074aee6ba4b515d7a7d2356c48d'}, 'duration': 3.797304153442383, 'iteration': 4, 'loss': 0.5675525019445165, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.4324474980554835, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '13c40a925f2aec072ca1e5a920666e3c1e3b3c45', 'config': '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'pipeline': 'd62a2dd08a2302b6865b752a8402d7121c50ffa2'}, 'duration': 0.10585403442382812, 'iteration': 5, 'loss': 0.13006114423991022, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8699388557600898, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '540a45902ebb045094e7f9e97496ccbeb7a90fb5', 'config': 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'pipeline': '85061af7b874940691fdd932446828ac2fa4c1bb'}, 'duration': 0.5430538654327393, 'iteration': 6, 'loss': 0.1647513179500475, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8352486820499525, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '87d5b1e58bcec171ba26ad066f211947dae8186e', 'config': 'a04b10121bc3062e33535f212319e0f179c9ad25', 'pipeline': 'ef6789d0e67f9b3c7ce8b1307bef8f23e94a9356'}, 'duration': 0.24048995971679688, 'iteration': 7, 'loss': 0.5712870538415002, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.4287129461584997, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '416874f456f9e3a9468593855ff7b2633fd4052a', 'config': 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', 'pipeline': '78de7c03f6ffe5095a74a5a9c5b256bff63fa061'}, 'duration': 0.5829639434814453, 'iteration': 8, 'loss': 0.3043524760176304, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6956475239823696, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'e0275f0094f6fb371cf0099149563fa4b6681af2', 'config': '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', 'pipeline': 'd34e5c9111ce937e6e420f768000146877fe94e8'}, 'duration': 0.5986099243164062, 'iteration': 9, 'loss': 0.2544950738916256, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 4}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.7455049261083744, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '125a11905c60d465adb56aee45ef258ac169e1f7', 'config': '8d57ccd3fa34b1801faa296e8555a9f03259255e', 'pipeline': 'a06e2f915e090a444b26605356f4c747a249ea2a'}, 'duration': 2.7123239040374756, 'iteration': 10, 'loss': 0.10922348975887997, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 3})}, 'score': 0.89077651024112, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '344f7e239f22270e6f3341dd4a57803226a3b28e', 'config': '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', 'pipeline': 'edbddb2560ce924fc70238e4ab75f68cfb8ee514'}, 'duration': 0.0803520679473877, 'iteration': 11, 'loss': 0.3251674444732521, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.6748325555267479, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}, 'config_hash': {'algorithm': '2ebe9f387399c58e699e2023df97e8401cbff875', 'config': '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', 'pipeline': '2044797b200cfe5210d1b544bb59b06bd6c11a97'}, 'duration': 2.455772876739502, 'iteration': 12, 'loss': 0.12288803906317525, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8771119609368248, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': '1ac5f84fec70ef33d09d48b5386a6a96471cf833', 'config': '8bc535d82ba1f2fdaf9269392dac15794d546022', 'pipeline': 'f0eb786efd2ecf50b0dca63de1896ae582538587'}, 'duration': 0.2400360107421875, 'iteration': 13, 'loss': 0.1496705124881169, 'max_history_score': 0.9244252873563219, 'max_history_score_std': 0.033048520938076406, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8503294875118831, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, 'config_hash': {'algorithm': 'd123417d92a71cece61b892ce4a8fc5e0553c471', 'config': '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', 'pipeline': 'e2564fb0cd81bf9c1ad78e4414031e8362135444'}, 'duration': 0.30900001525878906, 'iteration': 14, 'loss': 0.054301702532192464, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9456982974678075, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': None, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': 'eedd0397c19d6099cee07baa517274bbd81484f1', 'config': '8a556fbb5f0562a757fb772dcca73b11dc651a9e', 'pipeline': '5eef3fcb78ba2e3707813fee06b153c01468a814'}, 'duration': 0.06078696250915527, 'iteration': 15, 'loss': 0.28695985653789646, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7130401434621035, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': '393d7073d09a4f7ac7386db1063d34d3c44dcfd3', 'config': '22912c0802d709db3d433f86a9a23b1a05935421', 'pipeline': '1ce34b7894ef342571d974bb19e8ec821a512c6b'}, 'duration': 0.7407939434051514, 'iteration': 16, 'loss': 1.0, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.0, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'random'}, 'config_hash': {'algorithm': 'ad9329a44d0a9b2e1aeab81543776cb9fbf5c90d', 'config': 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', 'pipeline': '0f82927d157c0191da31a1ff64391155fdb32712'}, 'duration': 3.4724669456481934, 'iteration': 17, 'loss': 0.10709748509204042, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': False}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 1})}, 'score': 0.8929025149079596, ...}, {'algorithm': {'criterion': 'gini', 'max_depth': 1, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'random'}, 'config_hash': {'algorithm': 'c8717c37aac7c6727c63efc3eb51b48c35bc7177', 'config': '43bda247c06e9293f2de626a92a917738dea10d0', 'pipeline': '723b9f6406b1dccd5b4f972c8399a9a72c5c5e74'}, 'duration': 0.23369193077087402, 'iteration': 18, 'loss': 0.3233795696136894, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.6766204303863106, ...}, {'algorithm': {'criterion': 'entropy', 'max_depth': 2, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, 'config_hash': {'algorithm': 'a05d457f2215f2d4f5af008b741849ed2e458a69', 'config': 'cd57fcc415105c2001f90b744be7be968adb3d23', 'pipeline': '4e0f5dcb55776462118c91b4ce85045efa05e240'}, 'duration': 0.5363419055938721, 'iteration': 19, 'loss': 0.08955146486906929, 'max_history_score': 0.9456982974678075, 'max_history_score_std': 0.03330299559080591, 'max_history_step': 'joint', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9104485351309307, ...}, ...], 'history_hash': ['845b8bc860599df5d7b600890fb8c2e89a662c1e', 'b17f24b6406d3eb6cc4376800ea9fce6fd2cddb7', '94f4ebc5c4c41d02d1a28d49d4e745860510d7ad', '6cf2a3f02228bd84665ca4eeee46d1f8d7511f8b', '781eac26ada8f156ea4d01b7d8e6af83748b7ccc', '5ae32bd32953af04b3fed1424eedcfb9d3cabf98', 'c7e198962f26eb27d1452ab867f181ce84bd6e06', 'a04b10121bc3062e33535f212319e0f179c9ad25', 'd93360a0b22b2a60afd772fd665d7af3dc0b482a', '5de4cfd8f2ec1c64d9fd51465ad33e20e51478bd', '8d57ccd3fa34b1801faa296e8555a9f03259255e', '2a1c48ac7f2936eeec176d796d98148b1fbb06f8', '4cd98ab31c1479a99fbaa6ab3f0d72c8b3bb7d3a', '8bc535d82ba1f2fdaf9269392dac15794d546022', '708d9e9a998ee07907ac4c5de29d2f3db04a6af2', '8a556fbb5f0562a757fb772dcca73b11dc651a9e', '22912c0802d709db3d433f86a9a23b1a05935421', 'f0d84cf4ea19c8ea9a6ea5761a9ca99e72120b2a', '43bda247c06e9293f2de626a92a917738dea10d0', 'cd57fcc415105c2001f90b744be7be968adb3d23', ...], 'history_index': {'0074cafee320e6c3622602c5124cc31de85707ab': 134, '00f1a2050ea07066c5b1d28ebf1270ddf894bb1b': 255, '01be45bf0550eb613bba8261370088c8f9136888': 128, '031b1631fc425216de454269918447e52e72ca68': 68, '03d1fb3faad293993460dd91cec17e6f724a26fc': 221, '0468441b92e644c33b4c990a171d566855e87571': 123, '04e0a5b1d0c259ceef2b69e2d18c9e9d35ca3516': 32, '05f8df088ae5b6dc1600333232ed5e75a89ebbb6': 26, '083df6ba01404a9f4c505cf7655edce2e75058b6': 117, '08c091c55c3a2e14620b18bcfd6b3060afa92aa7': 44, ...}, 'iteration': 269, 'max_history_score': 0.9545328839339728, 'max_history_score_std': 0.03385516491685888, 'max_history_step': 'joint'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'time': 300}, step='joint')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Mon Jun 17 12:54:42 2019
PID: 16665                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), {'score': <function _passthrough_scorer>}, array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), scorer={'score': <function _passthrough_scorer>}, train=array([ 25,  26,  27,  28,  29,  30,  31,  32,  ..., 561, 562, 563, 564,
       565, 566, 567, 568]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...,  89,  90,
        92,  93,  96,  97,  98, 101]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.714e+01, 1.640e+01, 1.160e+02, ..., 2...., ..., 0.000e+00, 2.871e-01,
        7.039e-02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...1, 1, 1, 1, 1, 1, 1, 0, 0,
       0, 0, 0, 0, 1]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[ 0.93106601,  0.4229459 ],
       [ 0.57...-0.20695521],
       [ 0.34174734, -0.201702  ]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 0.93106601,  0.4229459 ],
       [ 0.57...-0.20695521],
       [ 0.34174734, -0.201702  ]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[ 0.93106604,  0.4229459 ],
       [ 0.57...      [ 0.34174734, -0.201702  ]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [0.],
       [0.],
       [0.],
       [0.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.0 (0.0) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.715504277936 (0.0359545247492) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.940370322358 (0.0403656915724) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917435830957 (0.0341386611481) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926334154351 (0.0276969811119) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917716705557 (0.0342865574367) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.907035908737 (0.0402958234532) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.940402730965 (0.0231491669048) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.884162993691 (0.0745557373122) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.922731397459 (0.0325605228708) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.607305980468 (0.132116386327) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.920978091781 (0.0293754164012) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.912329314666 (0.0287505270439) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.951024112004 (0.0353258142694) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.926241249676 (0.0331924165526) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.912080848673 (0.0346452342598) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.922639573071 (0.0327146153791) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.919471091522 (0.0336658146853) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.876927231873 (0.0440004519632) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.92094676346 (0.0307699798544) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.927872482931 (0.047198774961) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.910512272059 (0.0587100063268) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.86993885576 (0.053913377943) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.935077996716 (0.0267750093983) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.89450350013 (0.0305620988232) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.917562224527 (0.0298456624395) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.924548440066 (0.0230809323126) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.898011191773 (0.0440253157983) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.938526272578 (0.0177819370636) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.924579768386 (0.0201637747955) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.901738181661 (0.0418640910038) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.935045588108 (0.0406637663191) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.899891971308 (0.0393599025995) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.945728545502 (0.0437957788936) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.889363494944 (0.039945065141) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.931723705816 (0.0440590366992) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.897982024026 (0.0282998042822) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.794142684297 (0.0939090430517) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.705955621813 (0.0577473375842) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.950930127042 (0.0378686472648) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.907155820586 (0.0292027765083) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.929842926281 (0.03454521995) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.931569224786 (0.0211256969162) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.82456788523 (0.0426645501873) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.836010284332 (0.0898699637847) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.88231246219 (0.049707905254) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.937047359779 (0.0352441254569) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.921039668136 (0.030352757635) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.928181444992 (0.0231995903875) [J]
Best score: 0.954532883934 (0.0338551649169) [J] | Score: 0.78611615245 (0.0700560925931) [J]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_FeatureUnion", 
        {
            "features__pca__n_components": 4, 
            "features__selectkbest__k": 4
        }
    ], 
    "normalizer": [
        "normalizer_PowerTransformer", 
        {}
    ], 
    "rebalance": [
        "rebalance_SMOTE", 
        {
            "rebalance__k_neighbors": 5
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "gini", 
    "max_depth": 4, 
    "max_features": 3, 
    "max_leaf_nodes": null, 
    "min_samples_leaf": 3, 
    "min_samples_split": 3, 
    "splitter": "best"
}
BEST SCORE: 0.954532883934 (0.0338551649169)
##################################################
