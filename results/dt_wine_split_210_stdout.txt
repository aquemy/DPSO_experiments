SCENARIO:
 {
    "control": {
        "seed": 42
    }, 
    "file_name": "dt_wine_split_210", 
    "policy": {
        "step_pipeline": 210
    }, 
    "setup": {
        "algorithm": "DecisionTree", 
        "dataset": "wine", 
        "policy": "split", 
        "runtime": 300
    }, 
    "title": "Decision Tree on Wine with Split policy"
}
## Data Pipeline
Best score: 0.767625558996 (0.0939934406263) [P] | Score: 0.767625558996 (0.0939934406263) [P]
Best score: 0.800842793258 (0.138300059316) [P] | Score: 0.800842793258 (0.138300059316) [P]
Best score: 0.865718524252 (0.104714924111) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.865718524252 (0.104714924111) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.889146886825 (0.0822084782381) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.889146886825 (0.0822084782381) [P] | Score: 0.745620485036 (0.120295810294) [P]
Best score: 0.889146886825 (0.0822084782381) [P] | Score: 0.878620571035 (0.0974147442327) [P]
Best score: 0.905813553492 (0.0785061412244) [P] | Score: 0.905813553492 (0.0785061412244) [P]
Best score: 0.905813553492 (0.0785061412244) [P] | Score: 0.766529067767 (0.128728008054) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.921826625387 (0.067768909356) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.906105951152 (0.0485421103561) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.67431630547 (0.147368113975) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.871132180943 (0.0612100567254) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.916597867217 (0.0449186154586) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.862102253182 (0.107696622206) [P]
Best score: 0.921826625387 (0.067768909356) [P] | Score: 0.872445820433 (0.0991428834287) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938235294118 (0.0585952360104) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.65286377709 (0.150263323824) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910055469556 (0.0445689259071) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709550223598 (0.0932903001466) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900257997936 (0.0691172334862) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.80592750258 (0.0917955907307) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0515031664197) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.679579463364 (0.151045148216) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949271155831 (0.0463027228622) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8891124871 (0.0818814637768) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.89993120055 (0.0817060739902) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.794891640867 (0.117776445557) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.792842707258 (0.0579389769853) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856983144135 (0.111334464862) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.133171105359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0390757291364) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.833079635363 (0.0830496617261) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.782828087375 (0.0894177130347) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856363949088 (0.094732634166) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889439284486 (0.0816382658715) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.597817767458 (0.11296675888) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0571826905791) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.966632266942 (0.0368981749401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955847953216 (0.0543804625274) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961695906433 (0.0491793395113) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.606335999312 (0.0865065592118) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.890316477468 (0.0953431379336) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916924664603 (0.0665513776021) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8112250602 (0.0799829434184) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.862211902305 (0.0900642164693) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.663205194358 (0.141110043398) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911007911937 (0.062132997769) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.808849329205 (0.0907947490026) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.769489594083 (0.111663387948) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.948944358445 (0.0400690859368) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.828184124527 (0.119687416137) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94963880289 (0.0399246413047) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719781991744 (0.064805207427) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900842793258 (0.0671855885652) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.897194272446 (0.0649661637517) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.745403336773 (0.0736246846795) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895321637427 (0.0939120110451) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.911007911937 (0.062132997769) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.708855779154 (0.0561565218745) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685829463364 (0.114998681507) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93918128655 (0.067843818897) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686121861025 (0.15506431842) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938486842105 (0.0678219293354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8891124871 (0.0547802008624) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.584874871001 (0.148924519694) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922153422773 (0.0510378899068) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916230220158 (0.0504316603952) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.725412796698 (0.0679632539869) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.595816133471 (0.121489703501) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0362241066736) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.782133642931 (0.0818828350003) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.854211816305 (0.093694062163) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.104062136948) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926722136223 (0.0439202073737) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0389185000234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910784313725 (0.0901516656782) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.9391124871 (0.0570638971958) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.708412882697 (0.0670502103632) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0497097329339) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921826625387 (0.0579487460958) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938200894393 (0.0484751842224) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.6969749742 (0.11024424607) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0768747960655) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.872772617819 (0.0958287690331) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.67431630547 (0.151498940319) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.954534313725 (0.0487157144722) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.840024079807 (0.0854178987485) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.71470373237 (0.0766024782022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.680205108359 (0.0822562211721) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944736842105 (0.0657400724205) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.745444186447 (0.0768403494539) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.78260878913 (0.109434676193) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.795218438252 (0.111843742247) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.680968352253 (0.0953946611542) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94441004472 (0.0608738486511) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916305469556 (0.0380320967844) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950877192982 (0.0504892109805) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.723404712762 (0.0884652464223) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.67431630547 (0.151498940319) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.848030615755 (0.0752471123541) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955521155831 (0.0484599339307) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933264533884 (0.0417396400551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915284227726 (0.0392852350693) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0523873475648) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.955153508772 (0.0335493865406) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.798037065703 (0.0955363498792) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.821349329205 (0.0621105108818) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0501184039547) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.837396800826 (0.0375362971986) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.900223598211 (0.0810934551673) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932972136223 (0.0424026704624) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.809911420709 (0.104585442587) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.65954377365 (0.122581961234) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93388372893 (0.0465986905075) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709406174751 (0.090591115854) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0490635956145) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888418042656 (0.0595453163075) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961403508772 (0.0432867061373) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.95522875817 (0.0485170314967) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93845244238 (0.028885202632) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944042397661 (0.070312071923) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.777238132095 (0.0763014268294) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.68056630547 (0.14218966839) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0525497907586) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.832064843481 (0.112526058097) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.860605865153 (0.048939849554) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.943423202614 (0.0430894350526) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0506515360022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.707718438252 (0.0748956845987) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.079765804157) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877674578603 (0.0546756978551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.645878482972 (0.0572749013571) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.876687736498 (0.0649749611548) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0630793316873) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.779981510148 (0.0995920625766) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878149724802 (0.0965893105874) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949965600275 (0.0299560627161) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944334795322 (0.0550424641413) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.948944358445 (0.0400690859368) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889766081871 (0.0739257389302) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.799236756106 (0.105041188638) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.715036979704 (0.0927526331154) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932679738562 (0.0603505501359) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.886812005504 (0.0449301265667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.708344083247 (0.118509345932) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.926722136223 (0.0504605644673) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.890058479532 (0.0916208369164) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.764226436189 (0.0992407328214) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921458978328 (0.0366562249878) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.828620571035 (0.119566441537) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861661506708 (0.0996801120004) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.956140350877 (0.0476527457017) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.10267264632) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884795321637 (0.0985011297177) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.123553257748) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.804757911937 (0.0784220544899) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933223684211 (0.0689610852097) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.884760921913 (0.0902739493038) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.678960268318 (0.125827042653) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938493292054 (0.0643649646432) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916271069831 (0.0581766778977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927416580667 (0.0441394851439) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882535689714 (0.05190230836) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916305469556 (0.0673265188385) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950257997936 (0.0288381532828) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.665540075679 (0.132171415981) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.895614035088 (0.0930546080721) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0506139089851) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.803592621259 (0.0989805671708) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.855635104919 (0.0995983870641) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.886812005504 (0.0449301265667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927382180943 (0.0623469650624) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.93293128655 (0.0647619668046) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.645994582043 (0.0927109904465) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949346405229 (0.047046340029) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.717481510148 (0.110759802032) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.766086171311 (0.0957520612212) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8674750602 (0.103962298585) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889766081871 (0.0739257389302) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916271069831 (0.0581766778977) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.781439198486 (0.108397006326) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910932662539 (0.0593360260447) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.613497592019 (0.11011178628) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.755600705194 (0.0988400176075) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.816787065703 (0.107698880139) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.783161334709 (0.104118541286) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944375644995 (0.0556933669295) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932277691778 (0.0422657423773) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.803334623323 (0.0999600167347) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.788418042656 (0.0874585977004) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0722050551371) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950257997936 (0.0380647216643) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.671095631235 (0.121132815144) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909401874785 (0.0595944691499) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.72720373237 (0.121067617315) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.949890350877 (0.0381682735823) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.628775369797 (0.0949800338637) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889731682147 (0.0844110457376) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939146886825 (0.0381399570378) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.883154884761 (0.0552076735086) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.613497592019 (0.11011178628) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.915208978328 (0.052242668966) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.857567939456 (0.118935635694) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.864882180943 (0.0282754310955) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.612007653939 (0.113878382358) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856690746474 (0.0805405040403) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938820089439 (0.0581271404715) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921861025112 (0.0571965151156) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.909728672171 (0.0522654088808) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.828184124527 (0.119687416137) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.711749656003 (0.100224494641) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.932972136223 (0.0491454007305) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889146886825 (0.0822084782381) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.893973598211 (0.0566689522237) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.889439284486 (0.0888784245796) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.71795880633 (0.0737604485827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894483144135 (0.0868166833929) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916305469556 (0.0517784538882) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.679871861025 (0.154149260976) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.86776745786 (0.0826674057667) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.748105865153 (0.0882976490633) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.817591159271 (0.101144409189) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94470244238 (0.0423237031928) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.735612315101 (0.0757040767401) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0757977543348) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.870912882697 (0.0761762738485) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.657316391469 (0.0853525183366) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.598295063639 (0.116682957461) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.842189112487 (0.0996384278805) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927743378053 (0.0433992066492) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938527691778 (0.0531085518734) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921534227726 (0.052819251211) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950550395597 (0.0440118399343) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.65118249054 (0.0497213500988) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877966976264 (0.094933058649) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.686925954592 (0.0996270767814) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.815099329205 (0.0540496135642) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.566567767458 (0.131072420742) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.945029239766 (0.0549956395112) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910681114551 (0.0637486419726) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.735537065703 (0.0867287360536) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.721280529756 (0.0778026665503) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916632266942 (0.0372679425104) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.766344169247 (0.119466860505) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867182662539 (0.0890441311846) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.757535689714 (0.0687902102728) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.94861756106 (0.0487466207159) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.764260835913 (0.0940384417783) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.950292397661 (0.0630793316873) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.927014533884 (0.0433226346855) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.681370399037 (0.069806015854) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.888050395597 (0.0417782818859) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.828947368421 (0.129768242882) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.91038871689 (0.0851830891022) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933625730994 (0.0416612800458) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861627106983 (0.0926430717001) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.904792311662 (0.0350092098544) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.65809253526 (0.125957788084) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.910347867217 (0.0364241383554) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.665540075679 (0.132171415981) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.789439284486 (0.135572208972) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.865718524252 (0.104714924111) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0628045713123) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.079765804157) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.882385190918 (0.108482371918) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719053147575 (0.111874280199) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.857567939456 (0.118935635694) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.922153422773 (0.0567639864417) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.693210354317 (0.108992944175) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.781916494668 (0.0873082084984) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.867509459924 (0.104832450198) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878620571035 (0.0974147442327) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.787764447884 (0.0731533391743) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944375644995 (0.0432109155042) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.655383556932 (0.0695695717411) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944736842105 (0.0430420877674) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866167870657 (0.10506577726) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.933264533884 (0.0417396400551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.720878482972 (0.0523567996753) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916271069831 (0.0632598593251) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.698037065703 (0.0900961893662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.860272617819 (0.0702821642909) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.843904798762 (0.0673486139617) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944048847609 (0.0570279095313) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.719966890265 (0.0457445332895) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.671192380461 (0.180469639551) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921826625387 (0.0579487460958) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.877382180943 (0.0744655305035) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.724752751978 (0.0936614545289) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.90515995872 (0.062205803354) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.107922912915) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.660939112487 (0.0804837802119) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.944083247334 (0.0504653723412) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.737545149639 (0.076832998973) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.862831097351 (0.115386293176) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.921499828001 (0.0693042283806) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.704912710698 (0.100173364157) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.856071551428 (0.0891084949561) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.925374097007 (0.0653907554258) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0660971466567) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.894668042656 (0.0623974976289) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.659984520124 (0.113120606865) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.822342621259 (0.112596438352) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861953904369 (0.0958030235935) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.8828624871 (0.0508293512244) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866890264878 (0.0863438043477) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.916597867217 (0.0513319195563) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.850515995872 (0.0886197752662) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.905411506708 (0.0480357038905) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.898140264878 (0.0442227181776) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861627106983 (0.0926430717001) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.713607241142 (0.070050057188) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.866855865153 (0.102459609197) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.938527691778 (0.0398239925278) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.747050223598 (0.103052972705) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.709148176815 (0.059941995845) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.629259115927 (0.138951802057) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.878912968696 (0.0930512873827) [P]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.769781991744 (0.0982842171469) [P]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {}
BEST SCORE: 0.966632266942 (0.0368981749401)
##################################################
## Algorithm
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.843863949088 (0.060853931263) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.573260663915 (0.0377737272281) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 406, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 406, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 406, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:56:56 2019
PID: 14508                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861919504644 (0.0807899636139) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.939439284486 (0.0564255347241) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 416, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 416, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 416, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:56:59 2019
PID: 14655                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 417, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 417, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 417, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:00 2019
PID: 14698                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 420, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:01 2019
PID: 14737                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.0 (0.0) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.966632266942 (0.0368981749401) [P] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.93388372893 (0.0394227600048) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 427, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 427, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 427, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:04 2019
PID: 14778                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 431, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 431, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '040ba10e9364ebb24ac2528c670627d63ee1d342': 397, ...}, 'iteration': 431, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:05 2019
PID: 14825                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 437, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 437, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 437, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:08 2019
PID: 14869                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.928035775714 (0.0348349828487) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 441, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 441, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 441, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:10 2019
PID: 14912                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.938744840041 (0.0506354192735) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 453, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 453, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 453, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:12 2019
PID: 14956                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861919504644 (0.0807899636139) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 463, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:15 2019
PID: 14998                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.747377020984 (0.0858038822643) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 467, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 467, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 467, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:17 2019
PID: 15043                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.758488132095 (0.0889630361145) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 472, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 472, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 472, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:19 2019
PID: 15086                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939146886825 (0.0381399570378) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 479, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 479, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '032a59214687c8157a161dd3a96248bd26fad05e': 235, '03870d23363baf741b037e139fb66394c50a76f6': 437, ...}, 'iteration': 479, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:22 2019
PID: 15132                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.909728672171 (0.0629780983098) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 486, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 486, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 486, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:24 2019
PID: 15176                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.939439284486 (0.0441505726765) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.861592707258 (0.0985392125866) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 494, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 494, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 494, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:26 2019
PID: 15220                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944007997936 (0.0343323536854) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 500, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 500, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 500, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:29 2019
PID: 15264                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.928035775714 (0.0427873810917) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 505, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 505, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 3, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 505, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:31 2019
PID: 15307                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961001461988 (0.0427741057861) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.933591331269 (0.040909318612) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 512, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:33 2019
PID: 15352                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961076711386 (0.0500306746245) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 518, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:36 2019
PID: 15397                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 520, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 520, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 520, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:37 2019
PID: 15440                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.725447196422 (0.0639956153132) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 524, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 524, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 524, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:39 2019
PID: 15483                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 2, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 527, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:41 2019
PID: 15527                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.675488046096 (0.0782974489207) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 536, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 536, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 536, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:44 2019
PID: 15571                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 540, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 540, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 540, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:46 2019
PID: 15612                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 544, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 544, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 544, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:48 2019
PID: 15657                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 2, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 546, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 546, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 5, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, '032a59214687c8157a161dd3a96248bd26fad05e': 235, ...}, 'iteration': 546, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:50 2019
PID: 15700                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 555, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 555, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 555, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:53 2019
PID: 15746                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 2, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 556, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 556, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 3, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 556, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:53 2019
PID: 15787                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 560, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 560, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 560, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:55 2019
PID: 15825                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.909728672171 (0.0629780983098) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0546855080177) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 565, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 565, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 565, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:57:57 2019
PID: 15872                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 0, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 1}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 572, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 572, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'random'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 572, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:01 2019
PID: 15913                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...rt=False, random_state=42, splitter='random'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...ort=False, random_state=42, splitter='random'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...esort=False, random_state=42, splitter='random')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=42, splitter='random'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 576, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:03 2019
PID: 15960                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.954534313725 (0.0487157144722) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 4, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 581, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 581, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': None, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 5, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 581, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:05 2019
PID: 16005                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.915978672171 (0.068300402375) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 1, 'min_samples_leaf': 1, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_leaf': 2, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 584, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:07 2019
PID: 16049                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0501184039547) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.57881621947 (0.0388318016613) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.928837719298 (0.0915711402538) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 597, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 597, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, '03084f7ab454156b250563f274375aad15bd01d1': 481, ...}, 'iteration': 597, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:10 2019
PID: 16091                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.670224888201 (0.0792967994653) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 3, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 604, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 604, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 4, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 604, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:13 2019
PID: 16136                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0501184039547) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 0, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 609, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 609, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'gini', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 609, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:15 2019
PID: 16181                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.944300395597 (0.0538985380191) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 613, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 613, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 613, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:17 2019
PID: 16224                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0559387018582) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.961695906433 (0.0424420014154) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.685863863089 (0.0586906780286) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960784313725 (0.0501184039547) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 620, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 620, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 620, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:20 2019
PID: 16267                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.965972222222 (0.0512620431499) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.909728672171 (0.0629780983098) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966632266942 (0.0368981749401) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_leaf': 0, 'min_samples_split': 1, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 626, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 626, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 626, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:22 2019
PID: 16313                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.971527777778 (0.0378392575717) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.573260663915 (0.0377737272281) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.966339869281 (0.0510693458899) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.960089869281 (0.0503873888551) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.545775283798 (0.0315420201549) [A]
JoblibValueError
___________________________________________________________________________
...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in <module>()
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":
     31     args = cli.parse_args()
---> 32     main(args)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/main.py in main(args=Namespace(customize=[(['control', 'seed'], '42')..../scenarios/dt_wine_split_210.yaml', verbosity=0))
     21         test_size=0.4, 
     22         random_state=scenario['control']['seed']
     23     )
     24 
     25     policy = policies.initiate(scenario['setup']['policy'], config)
---> 26     policy.run(X,y)
        policy.run = <bound method Split.run of <experiment.policies.split.Split object>>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
     27 
     28     serializer.serialize_results(scenario, policy)
     29 
     30 if __name__ == "__main__":

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/policies/split.py in run(self=<experiment.policies.split.Split object>, X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]))
     53                 algo=tpe.suggest, 
     54                 max_evals=None,
     55                 max_time=self.config['time'] - self.config['step_pipeline'],
     56                 trials=trials_algo,
     57                 show_progressbar=False,
---> 58                 verbose=0
     59             )
     60 
     61         best_config = self.context['best_config']
     62         super(Split, self).display_step_results(best_config)

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=True, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    406             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    407             verbose=verbose,
    408             catch_eval_exceptions=catch_eval_exceptions,
    409             return_argmin=return_argmin,
    410             show_progressbar=show_progressbar,
--> 411             max_time=max_time
        max_time = 90
    412         )
    413 
    414     if trials is None:
    415         if points_to_evaluate is None:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in fmin(self=<hyperopt.base.Trials object>, fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, rstate=<mtrand.RandomState object>, verbose=0, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, return_argmin=True, show_progressbar=False)
    636             verbose=verbose,
    637             allow_trials_fmin=False,  # -- prevent recursion
    638             pass_expr_memo_ctrl=pass_expr_memo_ctrl,
    639             catch_eval_exceptions=catch_eval_exceptions,
    640             return_argmin=return_argmin,
--> 641             show_progressbar=show_progressbar)
        show_progressbar = False
    642 
    643 
    644 def trials_from_docs(docs, validate=True, **kwargs):
    645     """Construct a Trials base class instance from a list of trials documents

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in fmin(fn=<functools.partial object>, space={'criterion': <hyperopt.pyll.base.Apply object>, 'max_depth': <hyperopt.pyll.base.Apply object>, 'max_features': <hyperopt.pyll.base.Apply object>, 'max_leaf_nodes': <hyperopt.pyll.base.Apply object>, 'min_samples_leaf': <hyperopt.pyll.base.Apply object>, 'min_samples_split': <hyperopt.pyll.base.Apply object>, 'splitter': <hyperopt.pyll.base.Apply object>}, algo=<function suggest>, max_evals=9223372036854775807, max_time=90, trials=<hyperopt.base.Trials object>, rstate=<mtrand.RandomState object>, allow_trials_fmin=False, pass_expr_memo_ctrl=None, catch_eval_exceptions=False, verbose=0, return_argmin=True, points_to_evaluate=None, max_queue_len=1, show_progressbar=False)
    426                     verbose=verbose,
    427                     max_queue_len=max_queue_len,
    428                     show_progressbar=show_progressbar,
    429                     max_time=max_time)
    430     rval.catch_eval_exceptions = catch_eval_exceptions
--> 431     rval.exhaust()
        rval.exhaust = <bound method FMinIter.exhaust of <hyperopt.fmin.FMinIter object>>
    432     if return_argmin:
    433         return trials.argmin
    434     elif len(trials) > 0:
    435         # Only if there are some succesfull trail runs, return the best point in the evaluation space

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in exhaust(self=<hyperopt.fmin.FMinIter object>)
    273             raise StopIteration()
    274         return self.trials
    275 
    276     def exhaust(self):
    277         n_done = len(self.trials)
--> 278         self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
        self.run = <bound method FMinIter.run of <hyperopt.fmin.FMinIter object>>
        self.max_evals = 9223372036854775807
        n_done = 0
        self.asynchronous = False
    279         self.trials.refresh()
    280         return self
    281 
    282 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in run(self=<hyperopt.fmin.FMinIter object>, N=9223372036854775807, block_until_done=False)
    232                     if self.asynchronous:
    233                         # -- wait for workers to fill in the trials
    234                         time.sleep(self.poll_interval_secs)
    235                     else:
    236                         # -- loop over trials and do the jobs directly
--> 237                         self.serial_evaluate()
        self.serial_evaluate = <bound method FMinIter.serial_evaluate of <hyperopt.fmin.FMinIter object>>
    238                     try:
    239                         res = [d['result']['loss'] for d in
    240                                          self.trials.trials if
    241                                          d['result']['status'] == 'ok']

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/fmin.py in serial_evaluate(self=<hyperopt.fmin.FMinIter object>, N=-1)
    138                 trial['book_time'] = now
    139                 trial['refresh_time'] = now
    140                 spec = base.spec_from_misc(trial['misc'])
    141                 ctrl = base.Ctrl(self.trials, current_trial=trial)
    142                 try:
--> 143                     result = self.domain.evaluate(spec, ctrl)
        result = undefined
        self.domain.evaluate = <bound method Domain.evaluate of <hyperopt.base.Domain object>>
        spec = {'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}
        ctrl = <hyperopt.base.Ctrl object>
    144                 except Exception as e:
    145                     logger.info('job exception: %s' % str(e))
    146                     trial['state'] = base.JOB_STATE_ERROR
    147                     trial['misc']['error'] = (str(type(e)), str(e))

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/hyperopt/base.py in evaluate(self=<hyperopt.base.Domain object>, config={'criterion': 1, 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 0, 'min_samples_leaf': 0, 'min_samples_split': 0, 'splitter': 0}, ctrl=<hyperopt.base.Ctrl object>, attach_attachments=True)
    841             #    or the normal Python part (self.fn)
    842             pyll_rval = pyll.rec_eval(
    843                 self.expr,
    844                 memo=memo,
    845                 print_node_on_error=self.rec_eval_print_node_on_error)
--> 846             rval = self.fn(pyll_rval)
        rval = undefined
        self.fn = <functools.partial object>
        pyll_rval = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
    847 
    848         if isinstance(rval, (float, int, np.number)):
    849             dict_rval = {'loss': float(rval), 'status': STATUS_OK}
    850         else:

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective_algo(algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, current_pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 633, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300})
    105 
    106 def objective_pipeline(pipeline_config, current_algo_config, algorithm, X, y, context, config):
    107     return objective(pipeline_config, current_algo_config, algorithm, X, y, context, config, step='pipeline')
    108 
    109 def objective_algo(algo_config, current_pipeline_config, algorithm, X, y, context, config):
--> 110     return objective(current_pipeline_config, algo_config, algorithm, X, y, context, config, step='algorithm')
        current_pipeline_config = {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}
        algo_config = {'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}
        algorithm = 'DecisionTree'
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        context = {'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 633, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}
        config = {'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}
    111 
    112 def get_baseline_score(algorithm, X, y, seed):
    113     pipeline, _ = pipeline_conf_to_full_pipeline(
    114         get_baseline(), 

...........................................................................
/home/aquemy/dev/dp_hyperparameters/extension/experiment/objective.py in objective(pipeline_config={'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, algo_config={'criterion': 'entropy', 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_leaf': 1, 'min_samples_split': 2, 'splitter': 'best'}, algorithm='DecisionTree', X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), context={'baseline_score': 0.8891468868249055, 'baseline_score_std': 0.0822084782381061, 'best_config': {'algorithm': {'criterion': 'entropy', 'max_depth': 4, 'max_features': None, 'max_leaf_nodes': 5, 'min_samples_leaf': 1, 'min_samples_split': 3, 'splitter': 'best'}, 'config_hash': {'algorithm': '229f5c299026bce2f1685dbf601c002922ba6a13', 'config': '476acf6aa22473f4723aa6949b942ba567c57add', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.0984959602355957, 'iteration': 426, 'loss': 0.02847222222222212, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9715277777777779, ...}, 'history': [{'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e5ce4452c0570802824722bf1fb695372187a901', 'pipeline': '62499c500c396a43e7393167b70009ab89cb61b8'}, 'duration': 0.5595769882202148, 'iteration': 0, 'loss': 0.2323744410044719, 'max_history_score': 0.7676255589955281, 'max_history_score_std': 0.09399344062632498, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.7676255589955281, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3e86192b34c46b985a7976822d61becf1ee2e811', 'pipeline': 'fdd831f5ea769f432540440ea126a0798701ba97'}, 'duration': 0.09341311454772949, 'iteration': 1, 'loss': 0.19915720674234605, 'max_history_score': 0.800842793257654, 'max_history_score_std': 0.13830005931608766, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.800842793257654, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'pipeline': '73356980f37fb26335972c5bfc7b91044ce8f7e0'}, 'duration': 0.05565810203552246, 'iteration': 2, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', 'pipeline': '12c89200a558b2f3b91332566f41050143aecbe7'}, 'duration': 0.18168306350708008, 'iteration': 3, 'loss': 0.13428147574819393, 'max_history_score': 0.8657185242518061, 'max_history_score_std': 0.10471492411101402, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.8657185242518061, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '1539019e669ee91540062cec2240ce55aec58bef', 'pipeline': '71551e8e473fd3949c4c2319d7a96e243a1fdda1'}, 'duration': 0.050536155700683594, 'iteration': 4, 'loss': 0.1108531131750945, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_NoneType', {}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.8891468868249055, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', 'pipeline': '841134d2719723939eef75f5eac23ad82a5478ff'}, 'duration': 0.1125490665435791, 'iteration': 5, 'loss': 0.25437951496388034, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.7456204850361197, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '13de4c02912400436ca03cb3e8524c8a35b5a9c8', 'pipeline': '4cb840dab9096da435b9bf05f8db6c16c207ac04'}, 'duration': 0.08674001693725586, 'iteration': 6, 'loss': 0.12137942896456833, 'max_history_score': 0.8891468868249055, 'max_history_score_std': 0.0822084782381061, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.8786205710354317, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '67df5e313a574921f0609ac7d428fffdd4bf2740', 'pipeline': 'a5dca877d20bd554c2242f1d77927f1ba710a207'}, 'duration': 0.09876799583435059, 'iteration': 7, 'loss': 0.09418644650842789, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 1, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 7})}, 'score': 0.9058135534915721, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '7ff7178d131526214c18784480723dc3d8f87bd3', 'pipeline': '5d6c7180ea2af22dd98211c732394d5b4f832486'}, 'duration': 0.06810379028320312, 'iteration': 8, 'loss': 0.23347093223254212, 'max_history_score': 0.9058135534915721, 'max_history_score_std': 0.07850614122435386, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': True, 'normalizer__with_std': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7665290677674579, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'd1205c6548b49572324a82170965891dc22e8d8b', 'pipeline': '09926c4d89e0d52f25b5f9edd79fb247e0f8b7a3'}, 'duration': 0.1053009033203125, 'iteration': 9, 'loss': 0.078173374613003, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 1})}, 'score': 0.921826625386997, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'b4650882f15f1ecdbae6f52e08873bdbf255c021', 'pipeline': '8d45fabfeb85ffdcabf7076bd0e65fffe97ce928'}, 'duration': 0.04808998107910156, 'iteration': 10, 'loss': 0.20715729274165806, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 3}), 'normalizer': ('normalizer_NoneType', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.7928427072583419, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', 'pipeline': '1dc1dd5d7adf7161e71035202e0e925140797728'}, 'duration': 0.19589996337890625, 'iteration': 11, 'loss': 0.09389404884760921, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9061059511523908, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'pipeline': '86e6fa02918dd039a21e1eb23f2815c4b81240a1'}, 'duration': 0.06531691551208496, 'iteration': 12, 'loss': 0.32568369453044377, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': False}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.6743163054695562, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', 'pipeline': '233e83b295e30a012e33d609021c0c35122bcc94'}, 'duration': 0.5349318981170654, 'iteration': 13, 'loss': 0.1288678190574476, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 3, 'features__selectkbest__k': 1}), 'normalizer': ('normalizer_StandardScaler', {'normalizer__with_mean': False, 'normalizer__with_std': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.8711321809425524, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '3db4a127145189f537429f0e403466c543f7f928', 'pipeline': '3042b28a646d18f7bae1947f110aa4a75b27b47f'}, 'duration': 0.2217569351196289, 'iteration': 14, 'loss': 0.08340213278293773, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 2, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_PowerTransformer', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 2})}, 'score': 0.9165978672170623, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'be83320d8a23c3f471431e53175ad673d6111f34', 'pipeline': '379b30e5b167072ea36d37e1cbb51d4e0c017e23'}, 'duration': 0.1541299819946289, 'iteration': 15, 'loss': 0.13789774681802547, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 6})}, 'score': 0.8621022531819745, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'pipeline': '3b68e853a7f694777af4cb02df465a568e92b3c9'}, 'duration': 0.11307406425476074, 'iteration': 16, 'loss': 0.12755417956656356, 'max_history_score': 0.921826625386997, 'max_history_score_std': 0.06776890935602305, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 3}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_SMOTE', {'rebalance__k_neighbors': 5})}, 'score': 0.8724458204334364, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', 'pipeline': '7265f687f72fbe4a377a96e5252122093fc8e971'}, 'duration': 0.08671784400939941, 'iteration': 17, 'loss': 0.03336773305813556, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_PCA', {'features__n_components': 2}), 'normalizer': ('normalizer_MinMaxScaler', {}), 'rebalance': ('rebalance_NearMiss', {'rebalance__n_neighbors': 3})}, 'score': 0.9666322669418644, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': '6490dc10ba27068a1384a98be688f11c25e925c2', 'pipeline': '0c0e9eacd3b8458aed82e40661690dac856e2ba9'}, 'duration': 0.09525394439697266, 'iteration': 18, 'loss': 0.061764705882352944, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_FeatureUnion', {'features__pca__n_components': 4, 'features__selectkbest__k': 4}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': False, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_NoneType', {})}, 'score': 0.9382352941176471, ...}, {'algorithm': {}, 'config_hash': {'algorithm': 'bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'config': 'db9aaf84e94d44df0d25826228142dbe76a1b006', 'pipeline': '4ec4381bd291a49295a0fdc6d4d9d2b292a21b4e'}, 'duration': 0.5224370956420898, 'iteration': 19, 'loss': 0.3471362229102166, 'max_history_score': 0.9666322669418644, 'max_history_score_std': 0.03689817494006776, 'max_history_step': 'pipeline', 'pipeline': {'features': ('features_SelectKBest', {'features__k': 2}), 'normalizer': ('normalizer_RobustScaler', {'normalizer__quantile_range': (...), 'normalizer__with_centering': True, 'normalizer__with_scaling': True}), 'rebalance': ('rebalance_CondensedNearestNeighbour', {'rebalance__n_neighbors': 2})}, 'score': 0.6528637770897834, ...}, ...], 'history_hash': ['e5ce4452c0570802824722bf1fb695372187a901', '3e86192b34c46b985a7976822d61becf1ee2e811', '3319f0ee5cc054050d6876f460ba3ffb499e5147', 'a05614773b54a03bbb0bb675d0ea2c5cd2925c88', '1539019e669ee91540062cec2240ce55aec58bef', 'f8e77e431fb8e395857d79dd0fe52bcb0d14d482', '13de4c02912400436ca03cb3e8524c8a35b5a9c8', '67df5e313a574921f0609ac7d428fffdd4bf2740', '7ff7178d131526214c18784480723dc3d8f87bd3', 'd1205c6548b49572324a82170965891dc22e8d8b', 'b4650882f15f1ecdbae6f52e08873bdbf255c021', '4e4aa591c1b26abb85d0cc2c7651be5fa0cb1be2', '3a6dc1abafc35dbcfc6c7040753e96b862c4cd31', 'e9924bbfb0b373188c58c4caf63f648396d0ffd7', '3db4a127145189f537429f0e403466c543f7f928', 'be83320d8a23c3f471431e53175ad673d6111f34', '2687374a2e8e212ad752515c1ca03c3e7d30b084', 'cd61b0c6da18a6299b9b2b4c95b75bcaa4855929', '6490dc10ba27068a1384a98be688f11c25e925c2', 'db9aaf84e94d44df0d25826228142dbe76a1b006', ...], 'history_index': {'0075a4c55487c2db50707935d550abf05e552fb1': 400, '009105153e83e2691b50edf4073bfa6753c284b5': 275, '00da7bf1e1ee6299df66a9793d860e233dad0906': 149, '010e96682adcdaf7f072af6e58db02cb85414fb0': 276, '0130a91aee8ceb65cbb4470adb4268391eb21f11': 140, '021bc80fc931c27b1487806a9f69c2efcc9f18ca': 170, '0270c197560f4c50b6d1b53ef18fa890f4373bd2': 598, '029975ba3585c9ae8633a44aeeefb91d8d09bffb': 317, '02c552bbef5bca63a07ab4c0892e1c03bcb37f54': 549, '02f0a9668b9a484df3dff337c4958f014c44b94a': 380, ...}, 'iteration': 633, 'max_history_score': 0.9715277777777779, 'max_history_score_std': 0.037839257571736895, 'max_history_step': 'algorithm'}, config={'algorithm': 'DecisionTree', 'seed': 42, 'step_pipeline': 210, 'time': 300}, step='algorithm')
     45                 y,
     46                 cv=10,
     47                 n_jobs=-1,
     48                 return_estimator=False,
     49                 return_train_score=False,
---> 50                 verbose=0)
     51         score = np.mean(scores['test_score'])
     52         std = np.std(scores['test_score'])
     53         status = STATUS_OK
     54     except Exception as e:

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in cross_validate(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), groups=None, scoring=None, cv=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs', return_train_score=False, return_estimator=False, error_score='raise-deprecating')
    235         delayed(_fit_and_score)(
    236             clone(estimator), X, y, scorers, train, test, verbose, None,
    237             fit_params, return_train_score=return_train_score,
    238             return_times=True, return_estimator=return_estimator,
    239             error_score=error_score)
--> 240         for train, test in cv.split(X, y, groups))
        cv.split = <bound method StratifiedKFold.split of Stratifie...d(n_splits=10, random_state=None, shuffle=False)>
        X = array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2])
        groups = None
    241 
    242     zipped_scores = list(zip(*scores))
    243     if return_train_score:
    244         train_scores = zipped_scores.pop(0)

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    925                 # No need to wait for async callbacks to trigger to
    926                 # consumption.
    927                 self._iterating = False
    928 
    929             with self._backend.retrieval_context():
--> 930                 self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    931             # Make sure that we get a last message telling us we are done
    932             elapsed_time = time.time() - self._start_time
    933             self._print('Done %3i out of %3i | elapsed: %s finished',
    934                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Joblib worker traceback:
---------------------------------------------------------------------------
ValueError                                         Tue Jun  4 15:58:25 2019
PID: 16358                                  Python 2.7.15+: /usr/bin/python
...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    220     def __call__(self):
    221         # Set the default nested backend to self._backend but do not set the
    222         # change the default number of processes to -1
    223         with parallel_backend(self._backend, n_jobs=self._n_jobs):
    224             return [func(*args, **kwargs)
--> 225                     for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None)
        kwargs = {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False}
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), {'score': <function _passthrough_scorer>}, array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), 0, None, None), {'error_score': 'raise-deprecating', 'return_estimator': False, 'return_times': True, 'return_train_score': False})]
    226 
    227     def __len__(self):
    228         return self._size
    229 

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2]), scorer={'score': <function _passthrough_scorer>}, train=array([  6,   7,   8,   9,  10,  11,  12,  13,  ..., 170, 171, 172, 173, 174,
       175, 176, 177]), test=array([  0,   1,   2,   3,   4,   5,  59,  60,  ...,  64,  65,
        66, 130, 131, 132, 133, 134]), verbose=0, parameters=None, fit_params={}, return_train_score=False, return_parameters=False, return_n_test_samples=False, return_times=True, return_estimator=False, error_score='raise-deprecating')
    523 
    524     try:
    525         if y_train is None:
    526             estimator.fit(X_train, **fit_params)
    527         else:
--> 528             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...sort=False, random_state=42, splitter='best'))])>
        X_train = array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]])
        y_train = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2])
        fit_params = {}
    529 
    530     except Exception as e:
    531         # Note fit time as time until error
    532         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python2.7/dist-packages/imblearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('rebalance', ...esort=False, random_state=42, splitter='best'))]), X=array([[1.439e+01, 1.870e+00, 2.450e+00, ..., 1...., ..., 6.100e-01, 1.600e+00,
        5.600e+02]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2]), **fit_params={})
    234             This estimator
    235 
    236         """
    237         Xt, yt, fit_params = self._fit(X, y, **fit_params)
    238         if self._final_estimator is not None:
--> 239             self._final_estimator.fit(Xt, yt, **fit_params)
        self._final_estimator.fit = <bound method DecisionTreeClassifier.fit of Deci...presort=False, random_state=42, splitter='best')>
        Xt = array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]])
        yt = array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
        fit_params = {}
    240         return self
    241 
    242     def fit_transform(self, X, y=None, **fit_params):
    243         """Fit the model and transform with the final estimator

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671333e-01, -3.67009150e-02],
     ...-01],
       [ 7.12877536e-01, -4.42945906e-01]]), y=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), sample_weight=None, check_input=True, X_idx_sorted=None)
    796 
    797         super(DecisionTreeClassifier, self).fit(
    798             X, y,
    799             sample_weight=sample_weight,
    800             check_input=check_input,
--> 801             X_idx_sorted=X_idx_sorted)
        X_idx_sorted = None
    802         return self
    803 
    804     def predict_proba(self, X, check_input=True):
    805         """Predict class probabilities of the input samples X.

...........................................................................
/home/aquemy/.local/lib/python2.7/site-packages/sklearn/tree/tree.py in fit(self=DecisionTreeClassifier(class_weight=None, criter... presort=False, random_state=42, splitter='best'), X=array([[-1.49671331e-01, -3.67009155e-02],
     ...7.12877512e-01, -4.42945898e-01]], dtype=float32), y=array([[0.],
       [0.],
       [0.],
       [0...    [2.],
       [2.],
       [2.],
       [2.]]), sample_weight=None, check_input=True, X_idx_sorted=None)
    237         if not 0 <= self.min_weight_fraction_leaf <= 0.5:
    238             raise ValueError("min_weight_fraction_leaf must in [0, 0.5]")
    239         if max_depth <= 0:
    240             raise ValueError("max_depth must be greater than zero. ")
    241         if not (0 < max_features <= self.n_features_):
--> 242             raise ValueError("max_features must be in (0, n_features]")
    243         if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):
    244             raise ValueError("max_leaf_nodes must be integral number but was "
    245                              "%r" % max_leaf_nodes)
    246         if -1 < max_leaf_nodes < 2:

ValueError: max_features must be in (0, n_features]
___________________________________________________________________________
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.0 (0.0) [A]
Best score: 0.971527777778 (0.0378392575717) [A] | Score: 0.816378568971 (0.0853725484806) [A]
#################### STEP RESULT ####################
BEST PIPELINE:
 {
    "features": [
        "features_PCA", 
        {
            "features__n_components": 2
        }
    ], 
    "normalizer": [
        "normalizer_MinMaxScaler", 
        {}
    ], 
    "rebalance": [
        "rebalance_NearMiss", 
        {
            "rebalance__n_neighbors": 3
        }
    ]
}
BEST ALGO CONFIG:
 {
    "criterion": "entropy", 
    "max_depth": 4, 
    "max_features": null, 
    "max_leaf_nodes": 5, 
    "min_samples_leaf": 1, 
    "min_samples_split": 3, 
    "splitter": "best"
}
BEST SCORE: 0.971527777778 (0.0378392575717)
##################################################
